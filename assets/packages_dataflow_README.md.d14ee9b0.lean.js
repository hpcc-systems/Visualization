import{_ as s,c as a,a as t,o as p}from"./app.ab56574e.js";const m='{"title":"@hpcc-js/dataflow","description":"","frontmatter":{},"headers":[{"level":2,"title":"Motivation","slug":"motivation"},{"level":2,"title":"Terminology","slug":"terminology"},{"level":2,"title":"Quick Example","slug":"quick-example"},{"level":2,"title":"API Reference","slug":"api-reference"},{"level":3,"title":"Activities","slug":"activities"},{"level":3,"title":"Sensors","slug":"sensors"},{"level":3,"title":"Convenience","slug":"convenience"}],"relativePath":"packages/dataflow/README.md"}',o={};function e(c,n,u,l,i,r){return p(),a("div",null,n[0]||(n[0]=[t(`<h1 id="hpcc-js-dataflow" tabindex="-1">@hpcc-js/dataflow <a class="header-anchor" href="#hpcc-js-dataflow" aria-hidden="true">#</a></h1><p><em>A small functional library for processing &quot;data flows&quot; in JavaScript (<a href="https://observablehq.com/@gordonsmith/hpcc-js-dataflow" target="_blank" rel="noopener noreferrer">more examples on ObservableHQ</a>). Highlights:</em></p><ul><li><strong>Lazy Evaluation</strong> - Implemented using modern JavaScript generators and iterators</li><li><strong>Memory Efficient</strong> - Data &quot;streams&quot; from one &quot;activity&quot; to the next</li><li><strong>Functional</strong> - Pure functional implementation.</li><li><strong>Fully Typed</strong> - Written in typescript and supports typed chaining of functional activities</li><li><strong>UMD/ES6 Bundles</strong> - Works in NodeJS / Browser and includes ES6 modules to ensure you only include what you use (when bundling with RollupJS / Webpack etc.)</li></ul><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-hidden="true">#</a></h2><p>The underlying motivation for this library is to simplify the processing of data in an efficient way. The analogy we use is one of a &quot;data&quot; pipe, which consists of:</p><ul><li>Activities: Functional components that modify data as it flows through the pipe.</li><li>Sensors: Functional components that observe the data as it passes through the pipe.</li></ul><p>Some other properties of pipes are:</p><ul><li>Can be defined, before being used.</li><li>A complex pipe is just another &quot;Activity&quot; and as such can be re-used inside other pipes.</li><li>Encourages the user to only iterate through the source data ONCE allowing for less memory use and better overall performance.</li></ul><h2 id="terminology" tabindex="-1">Terminology <a class="header-anchor" href="#terminology" aria-hidden="true">#</a></h2><ul><li><strong>Activity</strong> - A functional unit of work that is primary used to alter the data (<code>map</code>, <code>filter</code>, <code>sort</code>, ...).</li><li><strong>Sensor</strong> - A function which &quot;observes&quot; the data without modifying it (<code>min</code>, <code>max</code>, <code>quartile</code>, ...).</li><li><strong>IterableActivity</strong> - An &quot;Activity&quot; which produces an &quot;Iterable&quot; output (<code>map</code>, <code>filter</code>, <code>sort</code>, ...).</li><li><strong>ScalarActivity</strong> - An &quot;Activity&quot; which produces a single value (<code>min</code>, <code>max</code>, <code>reduce</code>...).</li><li><strong>Process</strong> or <strong>Pipeline</strong> - A series of &quot;Activities&quot; chained together, so that &quot;data&quot; &quot;flows&quot; through the process / pipeline.</li></ul><h2 id="quick-example" tabindex="-1">Quick Example <a class="header-anchor" href="#quick-example" aria-hidden="true">#</a></h2><p>_Simple example of data flowing through a <code>pipe</code> of activities: <em><code>filter</code>-&gt;<code>map</code>-&gt;<code>filter</code>-&gt;<code>first</code></em></p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> count<span class="token punctuation">,</span> filter<span class="token punctuation">,</span> first<span class="token punctuation">,</span> generate<span class="token punctuation">,</span> map<span class="token punctuation">,</span> max<span class="token punctuation">,</span> pipe<span class="token punctuation">,</span> sensor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@hpcc-js/dataflow&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> c1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c2 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> c3 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token parameter">row</span> <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token comment">//  Keep running count of input</span>
    <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">&lt;=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token comment">//  Filter out numbers &gt; 0.5  </span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token comment">//  Keep running count of filtered rows</span>
    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>                     <span class="token comment">//  Convert to JSON Object </span>
        <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">index</span><span class="token operator">:</span> idx<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">row</span> <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//  Filter even row indecies </span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token comment">//  Keep running count of final rows</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token comment">//  Track largest value</span>
    <span class="token function">first</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                            <span class="token comment">//  Take first 3 rows</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Counts: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c3<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// [1] =&gt; Counts: undefined, undefined, undefined</span>

<span class="token keyword">const</span> outIterable <span class="token operator">=</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Counts: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c3<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// [2] =&gt; Counts: undefined, undefined, undefined</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>outIterable<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// [3] =&gt; [{&quot;index&quot;:0,&quot;value&quot;:0.19075931906641008},{&quot;index&quot;:2,&quot;value&quot;:0.4873469062925415},{&quot;index&quot;:4,&quot;value&quot;:0.4412516774100035}]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Counts: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c3<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>m1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// [4] =&gt; Counts: 6, 5, 3, 0.4873469062925415</span>


<span class="token keyword">const</span> outArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>outArray<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// [5] =&gt; [{&quot;index&quot;:0,&quot;value&quot;:0.5},{&quot;index&quot;:2,&quot;value&quot;:0.3}]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Counts: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c3<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>m1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// [6] =&gt; Counts:  6, 3, 2, 0.5</span>

</code></pre></div><p>Notes:</p><ol><li>All sensors are undefined as expected</li><li>All sensors are still undefined as <code>p1(generate(Math.random, 1000))</code> only returns an <code>IterableIterator</code>. IOW no data has flown through the pipe yet.</li><li><code>[...outIterable]</code> Is a shorthand way to populate an array with data from an iterable.</li><li>The sensors now have values we can peek at!</li><li>The pipe <code>p1</code> can be reused with new data, this time the input is a simple array</li><li>The same sensors will reflect the correct state from the second run</li></ol><p>Further the sensors can be observed at any point during the process.</p><div class="language-javascript"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> row <span class="token keyword">of</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>row<span class="token punctuation">.</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>c3<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>m1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// =&gt; 0: 1, 1, 1, 0.13662528848681</span>
<span class="token comment">// =&gt; 2: 3, 3, 2, 0.13662528848681</span>
<span class="token comment">// =&gt; 4: 7, 5, 3, 0.4328468228869129</span>
</code></pre></div><p>Note: Even though there is 1000000 rows of data being potentially generated, only 7 are actually read for this run.</p><h2 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-hidden="true">#</a></h2><ul><li><a href="#iterable-activities">Activities</a></li><li><a href="#sensors">Sensors</a></li><li><a href="#convenience">Convenience</a></li></ul><h3 id="activities" tabindex="-1">Activities <a class="header-anchor" href="#activities" aria-hidden="true">#</a></h3><p><em>Functions which alter data inside the dataflow pipe</em></p><p><a name="concat" href="#concat">#</a> <strong>concat</strong>(<em>iterable</em>, <em>iterable</em>): <em>iterable</em> <br><a name="concat" href="#concat">#</a> <strong>concat</strong>(<em>iterable</em>): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Concatenates two iterables into a single iterable. Similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener noreferrer">Array.concat</a>.</p><div class="language-typescript"><pre><code><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;</span>

<span class="token keyword">const</span> concatDEF <span class="token operator">=</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">concatDEF</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;</span>
<span class="token function">concatDEF</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/concat.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/concat.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="each" href="#each">#</a> <strong>each</strong>(<em>iterable</em>, <em>callbackFn</em>): <em>iterable</em> <br><a name="each" href="#each">#</a> <strong>each</strong>(_callbackFn): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Perform callback for <code>each</code> row in an iterable. Cannot alter the iterable value. Similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener noreferrer">Array.forEach</a>. Useful for debugging steps in a <a href="#pipe">pipe</a>.</p><div class="language-typescript"><pre><code><span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>row<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span>

<span class="token keyword">const</span> logFlow <span class="token operator">=</span> <span class="token function">each</span><span class="token punctuation">(</span><span class="token builtin">console</span><span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">logFlow</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/each.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/each.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="entries" href="#entries">#</a> <strong>entries</strong>(<em>iterable</em>): <em>iterable</em> <br><a name="entries" href="#entries">#</a> <strong>entries</strong>(): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Perform callback for <code>entries</code> row in an iterable. Cannot alter the iterable value. Similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries" target="_blank" rel="noopener noreferrer">Array.entries</a>.</p><div class="language-typescript"><pre><code><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; [0, &quot;a&quot;], [1, &quot;b&quot;], [2, &quot;c&quot;]</span>

<span class="token keyword">const</span> calcEntries <span class="token operator">=</span> <span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcEntries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; [0, &quot;a&quot;], [1, &quot;b&quot;], [2, &quot;c&quot;]</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/entries.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/entries.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="filter" href="#filter">#</a> <strong>filter</strong>(<em>iterable</em>, <em>condition</em>): <em>iterable</em> <br><a name="filter" href="#filter">#</a> <strong>filter</strong>(<em>condition</em>): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Filter iterable based on some <code>condition</code>. Similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener noreferrer">Array.filter</a>.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;spray&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;limit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;elite&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exuberant&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;destruction&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;present&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">filter</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;</span>

<span class="token keyword">const</span> smallWords <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">smallWords</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;spray&quot;, &quot;limit&quot;, &quot;elite&quot;</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/filter.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/filter.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="first" href="#first">#</a> <strong>first</strong>(<em>iterable</em>, <em>number</em>): <em>iterable</em> <br><a name="first" href="#first">#</a> <strong>first</strong>(<em>number</em>): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Limit the flow to the first N rows of data.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;spray&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;limit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;elite&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exuberant&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;destruction&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;present&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">first</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;spray&quot;, &quot;limit&quot;, &quot;elite&quot;</span>

<span class="token keyword">const</span> first2 <span class="token operator">=</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">first2</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;spray&quot;, &quot;limit&quot;</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/first.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/first.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="group" href="#group">#</a> <strong>group</strong>(<em>iterable</em>, <em>condition</em>): <em>iterable</em> <br><a name="group" href="#group">#</a> <strong>group</strong>(<em>condition</em>): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Groups data based on some grouping condition. Output is in the form {key: groupCondition, value:[...]}, where the key has to be either a <code>number</code> or a <code>string</code>.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;four&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;five&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;six&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">group</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; {key:  3, value: [&quot;one&quot;, &quot;two&quot;, &quot;six&quot;]}, {key:  4, value: [&quot;four&quot;, &quot;five&quot;]}, { key: 5, value: [&quot;three&quot;]}</span>

<span class="token keyword">const</span> groupByLength <span class="token operator">=</span> <span class="token function">group</span><span class="token punctuation">(</span>word <span class="token operator">=&gt;</span> word<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">groupByLength</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; {key:  3, value: [&quot;one&quot;, &quot;two&quot;, &quot;six&quot;]}, {key:  4, value: [&quot;four&quot;, &quot;five&quot;]}, { key: 5, value: [&quot;three&quot;]}</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/group.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/group.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="histogram" href="#histogram">#</a> <strong>histogram</strong>(<em>iterable</em>, <em>condition</em>, <em>options</em>): <em>iterable</em> <br><a name="histogram" href="#histogram">#</a> <strong>histogram</strong>(<em>condition</em>, <em>options</em>): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Groups data into buckets (or bins) based on numeric ranges. Output is in the form <code>{from: numeric, to: numeric, value:[...]}</code>.</p><p>Available options are:</p><div class="language-"><pre><code> { buckets: number }  // Specify number of buckets / bins
</code></pre></div><p>or</p><div class="language-"><pre><code> { min: number, range: number }  // Specify starting bucket (min) and size of bucket (range)
</code></pre></div><div class="language-typescript"><pre><code><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> n <span class="token operator">=&gt;</span> n<span class="token punctuation">,</span> <span class="token punctuation">{</span> buckets<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; {&quot;from&quot;:1,&quot;to&quot;:7,&quot;value&quot;:[1,3,6]},{&quot;from&quot;:7,&quot;to&quot;:13,&quot;value&quot;:[12]},{&quot;from&quot;:13,&quot;to&quot;:19,&quot;value&quot;:[13,13,14,19]}</span>

<span class="token function">histogram</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> n <span class="token operator">=&gt;</span> n<span class="token punctuation">,</span> <span class="token punctuation">{</span> min<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> range<span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; {&quot;from&quot;:0,&quot;to&quot;:5,&quot;value&quot;:[1,3]},{&quot;from&quot;:5,&quot;to&quot;:10,&quot;value&quot;:[6]},{&quot;from&quot;:10,&quot;to&quot;:15,&quot;value&quot;:[12,13,13,14]},{&quot;from&quot;:15,&quot;to&quot;:20,&quot;value&quot;:[19]}</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/histogram.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/histogram.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="map" href="#map">#</a> <strong>map</strong>(<em>iterable</em>, <em>callback</em>): <em>iterable</em> <br><a name="map" href="#map">#</a> <strong>map</strong>(<em>callback</em>): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Map data to a new shape via a callback frunction. Similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener noreferrer">Array.map</a>.</p><div class="language-typescript"><pre><code><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>row<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>row<span class="token punctuation">,</span> index<span class="token operator">:</span> idx <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; { n: 22, index: 0 }, { n: 11, index: 1 }, { n: 33, index: 2 }</span>

<span class="token keyword">const</span> indexData <span class="token operator">=</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>row<span class="token punctuation">,</span> index<span class="token operator">:</span> idx <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">indexData</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">11</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> n<span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; { n: 22, index: 1 }, { n: 11, index: 2 }, { n: 33, index: 3 }</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/map.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/map.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="skip" href="#skip">#</a> <strong>skip</strong>(<em>iterable</em>, <em>number</em>): <em>iterable</em> <br><a name="skip" href="#skip">#</a> <strong>skip</strong>(<em>number</em>): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Skip a set number of rows.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;spray&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;limit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;elite&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;exuberant&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;destruction&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;present&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">skip</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;</span>

<span class="token keyword">const</span> skip4 <span class="token operator">=</span> <span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">skip4</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; &quot;destruction&quot;, &quot;present&quot;</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/skip.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/skip.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="sort" href="#sort">#</a> <strong>sort</strong>(<em>iterable</em>, <em>compare</em>): <em>iterable</em> <br><a name="sort" href="#sort">#</a> <strong>sort</strong>(<em>compare</em>): (<em>iterable</em>) =&gt; <em>iterable</em> <br></p><p>Sort iterable based on result of <code>compare</code> function (should return -1, 0, 1). Similar to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener noreferrer">Array.sort</a>.</p><div class="language-typescript"><pre><code><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">sort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; 1, 2, 3, 4, 5</span>

<span class="token keyword">const</span> reverseSort <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">reverseSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span>  <span class="token comment">// =&gt; 5, 4, 3, 2, 1</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/activities/sort.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/sort.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><h3 id="sensors" tabindex="-1">Sensors <a class="header-anchor" href="#sensors" aria-hidden="true">#</a></h3><p><em>A collection of &quot;Observers&quot; which can be adapted as functions, activities and sensors</em></p><h4 id="types-interfaces" tabindex="-1">Types / Interfaces <a class="header-anchor" href="#types-interfaces" aria-hidden="true">#</a></h4><div class="language-typescript"><pre><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Observer<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token function">observe</span><span class="token punctuation">(</span>r<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> idx<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="adapters" tabindex="-1">Adapters <a class="header-anchor" href="#adapters" aria-hidden="true">#</a></h4><p><a name="sensor" href="#sensor">#</a> <strong>sensor</strong>(_: <em>Observer</em>): <em>iterable</em> <br></p><p>Adapts an observer so it can be used in a pipe.</p><p><a name="scalar" href="#scalar">#</a> <strong>scalar</strong>(_: <em>Observer</em>): <em>any</em> <br></p><p>Adapts an observer so it can be called as a regular function.</p><h4 id="observers" tabindex="-1">Observers <a class="header-anchor" href="#observers" aria-hidden="true">#</a></h4><p><a name="count" href="#count">#</a> <strong>count</strong>(): <em>Observer</em> <br></p><p>Counts the number of &quot;observed&quot; rows:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">filter</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">p1</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; 1000;</span>
s2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; 699;</span>

<span class="token keyword">const</span> doCount <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">doCount</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; 5</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/count.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/count.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="min" href="#min">#</a> <strong>min</strong>(): <em>Observer</em> <br><a name="min" href="#min">#</a> <strong>min</strong>(<em>accessor</em>): <em>Observer</em> <br></p><p>Calculates minimal value for &quot;observed&quot; rows:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">filter</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; 0</span>
s2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; 4</span>

<span class="token keyword">const</span> calcMin <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>row <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcMin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">44</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 22</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/min.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/min.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="max" href="#max">#</a> <strong>max</strong>(): <em>Observer</em> <br><a name="max" href="#max">#</a> <strong>max</strong>(<em>accessor</em>): <em>Observer</em> <br></p><p>Calculates maximum value for &quot;observed&quot; rows:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">filter</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; 5</span>
s2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; 2</span>

<span class="token keyword">const</span> calcMax <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>row <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcMax</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">44</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 44</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/max.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/max.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="extent" href="#extent">#</a> <strong>extent</strong>(): <em>Observer</em> <br><a name="extent" href="#extent">#</a> <strong>extent</strong>(<em>accessor</em>): <em>Observer</em> <br></p><p>Calculates extent (min + max) values for &quot;observed&quot; rows:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">extent</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> s2 <span class="token operator">=</span> <span class="token function">extent</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">filter</span><span class="token punctuation">(</span>r <span class="token operator">=&gt;</span> r<span class="token punctuation">.</span>age <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">sensor</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">p1</span><span class="token punctuation">(</span>population<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; [16, 66]</span>
s2<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; [31, 66]</span>

<span class="token keyword">const</span> calcExtent <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">extent</span><span class="token punctuation">(</span>row <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcExtent</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">44</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">33</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; [22, 44]</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/extent.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/extent.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="mean" href="#mean">#</a> <strong>mean</strong>(): <em>Observer</em> <br><a name="mean" href="#mean">#</a> <strong>mean</strong>(<em>accessor</em>): <em>Observer</em> <br></p><p>Calculates mean (average) value for &quot;observed&quot; rows:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> calcMean <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcMean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// =&gt; 0</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/mean.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/mean.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="median" href="#median">#</a> <strong>median</strong>(): <em>Observer</em> <br><a name="median" href="#median">#</a> <strong>median</strong>(<em>accessor</em>): <em>Observer</em> <br></p><p>Calculates median value for &quot;observed&quot; rows:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> calcMedian <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">median</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcMedian</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">// =&gt; 1</span>
<span class="token function">calcMedian</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">// =&gt; 1</span>
<span class="token function">calcMedian</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// =&gt; 1.5</span>
<span class="token function">calcMedian</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// =&gt; 1.5</span>
<span class="token function">calcMedian</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                     <span class="token comment">// =&gt; 9</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/median.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/median.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="quartile" href="#quartile">#</a> <strong>quartile</strong>(): <em>Observer</em> <br><a name="quartile" href="#quartile">#</a> <strong>quartile</strong>(<em>accessor</em>): <em>Observer</em> <br></p><p>Calculates quartile value for &quot;observed&quot; rows:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> calcQuartile <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">quartile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcQuartile</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// =&gt; [6, 15, 40, 43, 49]</span>
<span class="token function">calcQuartile</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                       <span class="token comment">// =&gt; [7, 15, 37.5, 40, 41]</span>
<span class="token function">calcQuartile</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                  <span class="token comment">// =&gt; [1, 1, 22, 133, 133]</span>
<span class="token function">calcQuartile</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                  <span class="token comment">// =&gt; [2, 2, 33, 144, 144]</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/quartile.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/quartile.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="reduce" href="#reduce">#</a> <strong>reduce</strong>(<em>reducer</em>[, <em>initialValue</em>]): <em>Observer</em> <br></p><p>Calculates reduced value for &quot;observed&quot; rows:</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">reduceFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span>prev<span class="token punctuation">,</span> row<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> prev <span class="token operator">+</span> row<span class="token punctuation">;</span>
<span class="token keyword">const</span> calcReduce1 <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">reduce</span><span class="token punctuation">(</span>reduceFunc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> calcReduce2 <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">reduce</span><span class="token punctuation">(</span>reduceFunc<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">calcReduce1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; 15</span>
<span class="token function">calcReduce2</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; 25</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/reduce.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/reduce.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="variance" href="#variance">#</a> <strong>variance</strong>(): <em>Observer</em> <br><a name="variance" href="#variance">#</a> <strong>variance</strong>(<em>accessor</em>): <em>Observer</em> <br></p><p>Calculates the <a href="https://en.wikipedia.org/wiki/Variance" target="_blank" rel="noopener noreferrer">variance</a> for the &quot;observed&quot; rows. If the number of rows is fewer than two numbers, returns undefined.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> calcVariance <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">variance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcVariance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; 2.5</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/variance.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/variance.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="deviation" href="#deviation">#</a> <strong>deviation</strong>(): <em>Observer</em> <br><a name="deviation" href="#deviation">#</a> <strong>deviation</strong>(<em>accessor</em>): <em>Observer</em> <br></p><p>Calculates the <a href="https://en.wikipedia.org/wiki/Standard_deviation" target="_blank" rel="noopener noreferrer">standard deviation</a> for the &quot;observed&quot; rows. If the number of rows is fewer than two numbers, returns undefined.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> calcDeviation <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">deviation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcDeviation</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// =&gt; 1.58113883008 == sqrt(2.5)</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/deviation.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/deviation.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="distribution" href="#distribution">#</a> <strong>distribution</strong>(): <em>Observer</em>&lt;<em>number</em>, { min: <em>number</em>, mean: <em>number</em>, max: <em>number</em>, deviation: <em>number</em>, variance: <em>number</em>}&gt; <br><a name="distribution" href="#distribution">#</a> <strong>distribution</strong>(<em>accessor</em>): <em>Observer</em>&lt;<em>any</em>, { min: <em>number</em>, mean: <em>number</em>, max: <em>number</em>, deviation: <em>number</em>, variance: <em>number</em>}&gt; <br></p><p>Calculates a &quot;distribution&quot; (a combination of min, max, mean, variance and deviance) of the &quot;observed&quot; rows. If the number of rows is fewer than two numbers, returns undefined.</p><div class="language-typescript"><pre><code><span class="token keyword">const</span> calcDistribution <span class="token operator">=</span> <span class="token function">scalar</span><span class="token punctuation">(</span><span class="token function">distribution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">calcDistribution</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// =&gt; { min: 1, mean: 3, max: 5, deviation: Math.sqrt(2.5), variance: 2.5}</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/observers/distribution.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/distribution.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><h3 id="convenience" tabindex="-1">Convenience <a class="header-anchor" href="#convenience" aria-hidden="true">#</a></h3><p><em>Convenience functions</em></p><p><a name="pipe" href="#pipe">#</a> <strong>pipe</strong>(<em>iterable</em>, ...<em>iterableActivity</em>): <em>iterable</em> <br><a name="pipe" href="#pipe">#</a> <strong>pipe</strong>(<em>iterable</em>, ...<em>iterableActivity</em>, <em>scalarActivity</em>): <em>scalar</em> <br><a name="pipe" href="#pipe">#</a> <strong>pipe</strong>(...<em>iterableActivity</em>): <em>iterableActivity</em> <br><a name="pipe" href="#pipe">#</a> <strong>pipe</strong>(...<em>iterableActivity</em>, <em>scalarActivity</em>): <em>scalarActivity</em> <br></p><p>Pipes a series of activities into a single process pipeline.</p><div class="language-typescript"><pre><code><span class="token comment">// Iterable output  </span>
<span class="token function">pipe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> <span class="token generic-function"><span class="token function">n</span> <span class="token generic class-name"><span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> index<span class="token operator">:</span> idx<span class="token punctuation">,</span> value<span class="token operator">:</span> n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">filter</span><span class="token punctuation">(</span>row <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> l<span class="token punctuation">.</span>value <span class="token operator">-</span> r<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">first</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; { index: 0, value: 0 }, { index: 2, value: 2 }, { index: 4, value: 4 }</span>

<span class="token keyword">const</span> process <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>
    <span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">=&gt;</span> <span class="token generic-function"><span class="token function">n</span> <span class="token generic class-name"><span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> idx<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> index<span class="token operator">:</span> idx<span class="token punctuation">,</span> value<span class="token operator">:</span> n <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">filter</span><span class="token punctuation">(</span>row <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> l<span class="token punctuation">.</span>value <span class="token operator">-</span> r<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">first</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">// =&gt; { index: 0, value: 0 }, { index: 2, value: 2 }, { index: 4, value: 4 }</span>

<span class="token comment">// Scalar output  </span>
<span class="token function">pipe</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    process<span class="token punctuation">,</span>
    <span class="token function">max</span><span class="token punctuation">(</span>row <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; 4</span>

<span class="token keyword">const</span> process_2 <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>
    process<span class="token punctuation">,</span>
    <span class="token function">min</span><span class="token punctuation">(</span>row <span class="token operator">=&gt;</span> row<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token function">process_2</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; 0</span>
</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/utils/pipe.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/pipe.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p><p><a name="generate" href="#generate">#</a> <strong>generate</strong>(<em>generatorFn</em>[, <em>maxIterations</em>]): <em>iterable</em> <br></p><p>Generates an iterable data set. Optionally limits the length to <code>maxIterations</code>.</p><div class="language-typescript"><pre><code><span class="token comment">// Iterable output  </span>
<span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; Random number iterator</span>
<span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// =&gt; Random number iterator limited to 100 items</span>

</code></pre></div><p><a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/utils/generate.ts" target="_blank" rel="noopener noreferrer">[source]</a> <a href="https://github.com/hpcc-systems/Visualization/blob/trunk/packages/dataflow/src/__tests__/generate.ts" target="_blank" rel="noopener noreferrer">[tests]</a></p>`,130)]))}var b=s(o,[["render",e]]);export{m as __pageData,b as default};
