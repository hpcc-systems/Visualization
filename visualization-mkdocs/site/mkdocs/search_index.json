{
    "docs": [
        {
            "location": "/Index/",
            "text": "Visualization Framework\n\n\n\n\n\n\n\n\n\n\nDemo/Test Page\n and its \nsource\n\n\nDermatology Test Page\n and its \nsource\n\n\nWiki\n\n\n\n\nThe goal of the HPCC Visualisation Framework is to provide a comprehensive set of visualizations, adhering to a consistent set of interfaces. \nIt includes wrappers for third party chart libraries (Google, C3 Charts, AM Charts etc.) as well as home grown visualizations. \nIt also adds a set of connectors and marshallers to make connecting visualizations to the HPCC Platform a trivial excercise.\n\n\nThe obligatory Hello World \nexample\n\n\n\ufeff\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nscript src=\nhttp://viz.hpccsystems.com/v1.2.2/dist-amd/hpcc-viz.js\n/script\n\n    \nscript src=\nhttp://viz.hpccsystems.com/v1.2.2/dist-amd/hpcc-bundles.js\n/script\n\n    \nscript\n\n        require.config({\n            paths: {\n                \nsrc\n: \nhttp://viz.hpccsystems.com/v1.2.2/dist-amd\n,\n                \nfont-awesome\n: \nhttp://viz.hpccsystems.com/v1.2.2/dist-amd/font-awesome/css/font-awesome.min\n\n            }\n        });\n    \n/script\n\n\n/head\n\n\nbody\n\n    \ndiv id=\nhelloWorld\n style=\nwidth:100%; height:100vh\n\n    \n/div\n\n    \nscript\n\n        require([\nsrc/common/TextBox\n], function (TextBox) {\n            var helloWorld = new TextBox()\n                .target(\nhelloWorld\n)\n                .text(\nHello\\nWorld!\n)\n                .render()\n            ;\n        });\n    \n/script\n\n\n/body\n\n\n/html\n\n\n\n\n\nStanding on the back of giants\n\n\nNone of this would would be possible without the great work of others.  The widgets/lib folder includes the work from:\n\n\n\n\nrequirejs\n\n\nD3\n\n\nTopojson\n\n\ndagre\n\n\nFont-Awesome\n \n\n\nColorBrewer\n\n\nC3\n\n\nAM Charts\n\n\nd3-cloud\n\n\n\n\nWhile widgets/src also includes wrappers for CDN hosted visualizations:\n\n\n\n\nGoogle Maps\n\n\nGoogle Charts",
            "title": "Home"
        },
        {
            "location": "/Index/#visualization-framework",
            "text": "Demo/Test Page  and its  source  Dermatology Test Page  and its  source  Wiki   The goal of the HPCC Visualisation Framework is to provide a comprehensive set of visualizations, adhering to a consistent set of interfaces. \nIt includes wrappers for third party chart libraries (Google, C3 Charts, AM Charts etc.) as well as home grown visualizations. \nIt also adds a set of connectors and marshallers to make connecting visualizations to the HPCC Platform a trivial excercise.  The obligatory Hello World  example  \ufeff !doctype html  html  head \n     meta charset= utf-8 \n     script src= http://viz.hpccsystems.com/v1.2.2/dist-amd/hpcc-viz.js /script \n     script src= http://viz.hpccsystems.com/v1.2.2/dist-amd/hpcc-bundles.js /script \n     script \n        require.config({\n            paths: {\n                 src :  http://viz.hpccsystems.com/v1.2.2/dist-amd ,\n                 font-awesome :  http://viz.hpccsystems.com/v1.2.2/dist-amd/font-awesome/css/font-awesome.min \n            }\n        });\n     /script  /head  body \n     div id= helloWorld  style= width:100%; height:100vh \n     /div \n     script \n        require([ src/common/TextBox ], function (TextBox) {\n            var helloWorld = new TextBox()\n                .target( helloWorld )\n                .text( Hello\\nWorld! )\n                .render()\n            ;\n        });\n     /script  /body  /html   Standing on the back of giants  None of this would would be possible without the great work of others.  The widgets/lib folder includes the work from:   requirejs  D3  Topojson  dagre  Font-Awesome    ColorBrewer  C3  AM Charts  d3-cloud   While widgets/src also includes wrappers for CDN hosted visualizations:   Google Maps  Google Charts",
            "title": "Visualization Framework"
        },
        {
            "location": "/user_guide/Getting-Started/",
            "text": "Getting Started\n\n\nThe framework is available in a variety of packages and sources, it also supports both Non-AMD and AMD paradigms for those who love/hate RequireJS and its kin.  \n\n\nInstallation details for both \nconsumers\n and \nvisualization developers\n are found below. \n\n\nThe pre-built packages can be accessed from here:\n\n\n\n\nCDN Server (AMD) - http://viz.hpccsystems.com/v1.2.4/dist-amd/\n\n\nCDN Server (Non AMD) - http://viz.hpccsystems.com/v1.2.4/dist/\n\n\nBower - \nbower install hpcc-viz --save\n\n\nGitHub - https://github.com/hpcc-systems/Visualization/releases\n\n\n\n\nAnd the sources can be found here:\n\n\n\n\nGitHub - https://github.com/hpcc-systems/Visualization/\n\n\n\n\nDevelopers\n\n\nThe following details how developers should develop widgets:\n\n\n\n\nDeveloping Widgets\n\n\n\n\nOther\n\n\n\n\nFAQ\n\n\n\n\n\n\nInstalling \n Using Releases\n\n\nLocally\n\n\nVia CDN\n\n\nVia Bower\n\n\nInstall node\n* \nNode\n\n\nInstall bower using npm\n\n\n$ npm install -g bower\n$ cd Your-Project-Dir\n$ bower install hpcc-viz\n\n\n\nAMD Usage\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nscript src=\nbower_components/hpcc-viz/dist-amd/hpcc-viz.js\n/script\n \n!-- Auto Loads RequireJS --\n\n    \nscript src=\nbower_components/hpcc-viz/dist-amd/hpcc-bundles.js\n/script\n\n    \nscript\n\n        require.config({\n            paths: {\n                \nsrc\n: \nbower_components/hpcc-viz/dist-amd\n,\n                \nfont-awesome\n: \n/bower_components/hpcc-viz/dist-amd/font-awesome/css/font-awesome.min\n,\n                \namchartsImg\n: \n/bower_components/hpcc-viz/dist-amd/img/amcharts/\n /* Only needed if using AmCharts */\n            }\n        });\n    \n/script\n\n\n/head\n\n\n/html\n\n\n\n\n\nSee \nExamples\n for how to create widgets.\n\n\nNon-AMD Usage\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nlink rel=\nstylesheet\n href=\n../bower_components/c3/c3.css\n /\n\n    \nlink rel=\nstylesheet\n href=\n../bower_components/font-awesome/css/font-awesome.css\n /\n\n    \nlink rel=\nstylesheet\n href=\n../dist/hpcc-viz.min.css\n\n\n    \n!--\n    Most scripts are optional, include only what you need\n    @TODO: shoud document dependencies in README\n    --\n\n    \nscript src=\nhttps://www.google.com/jsapi\n/script\n\n    \nscript src=\nhttps://maps.googleapis.com/maps/api/js\n/script\n\n    \nscript src=\n../bower_components/d3/d3.js\n/script\n\n    \nscript src=\n../bower_components/c3/c3.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/amcharts.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/serial.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/funnel.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/gauge.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/pie.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/radar.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/xy.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/gantt.js\n/script\n\n    \nscript src=\n../bower_components/dagre/index.js\n/script\n\n    \nscript src=\n../bower_components/colorbrewer/colorbrewer.js\n/script\n\n    \nscript src=\n../bower_components/topojson/topojson.js\n/script\n\n    \nscript src=\n../bower_components/d3-cloud/d3.layout.cloud.js\n/script\n\n\n    \nscript src=\n../dist/hpcc-viz-common.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-api.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-other.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-tree.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-chart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-form.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-graph.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-c3chart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-amchart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-google.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-map.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-layout.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-marshaller.min.js\n/script\n\n\n/head\n\n\n/html\n\n\n\n\n\nSee \nExamples\n for how to create widgets.\n\n\n\n\nDevelopment\n\n\nInstall node\n* \nNode\n\n\nInstall bower using npm\n\n\n$ npm install -g bower\n\n\n\nClone repository\n\n\ngit clone https://github.com/hpcc-systems/Visualization.git\n\n\n\nInstall Node module dependencies\n\n\n$ cd Visualization\n$ npm install\n\n\n\nInstall Bower dependencies\n\n\n$ bower install\n\n\n\nTwo new folders will be created in the root of the Visualization folder: \n\"node_modules\" \n \"bower_components\"\n\n\n\n\nBuilding Releases from Source (AMD \n Non-AMD)\n\n\nAfter following the above steps, run the following commands:\n\n\nInstall Gulp\n\n\n$ npm install -g gulp\n$ gulp\n\n\n\nTwo new folders will be created in the root of the Visualization folder once again: \n\"dist\" \n \"dist-amd\"\n\n\nRunning Unit Tests\n\n\n$ npm test",
            "title": "Getting Started"
        },
        {
            "location": "/user_guide/Getting-Started/#getting-started",
            "text": "The framework is available in a variety of packages and sources, it also supports both Non-AMD and AMD paradigms for those who love/hate RequireJS and its kin.    Installation details for both  consumers  and  visualization developers  are found below.   The pre-built packages can be accessed from here:   CDN Server (AMD) - http://viz.hpccsystems.com/v1.2.4/dist-amd/  CDN Server (Non AMD) - http://viz.hpccsystems.com/v1.2.4/dist/  Bower -  bower install hpcc-viz --save  GitHub - https://github.com/hpcc-systems/Visualization/releases   And the sources can be found here:   GitHub - https://github.com/hpcc-systems/Visualization/   Developers  The following details how developers should develop widgets:   Developing Widgets   Other   FAQ",
            "title": "Getting Started"
        },
        {
            "location": "/user_guide/Getting-Started/#installing-using-releases",
            "text": "Locally  Via CDN  Via Bower  Install node\n*  Node  Install bower using npm  $ npm install -g bower\n$ cd Your-Project-Dir\n$ bower install hpcc-viz  AMD Usage  !doctype html  html  head \n     script src= bower_components/hpcc-viz/dist-amd/hpcc-viz.js /script   !-- Auto Loads RequireJS -- \n     script src= bower_components/hpcc-viz/dist-amd/hpcc-bundles.js /script \n     script \n        require.config({\n            paths: {\n                 src :  bower_components/hpcc-viz/dist-amd ,\n                 font-awesome :  /bower_components/hpcc-viz/dist-amd/font-awesome/css/font-awesome.min ,\n                 amchartsImg :  /bower_components/hpcc-viz/dist-amd/img/amcharts/  /* Only needed if using AmCharts */\n            }\n        });\n     /script  /head  /html   See  Examples  for how to create widgets.  Non-AMD Usage  !doctype html  html  head \n     link rel= stylesheet  href= ../bower_components/c3/c3.css  / \n     link rel= stylesheet  href= ../bower_components/font-awesome/css/font-awesome.css  / \n     link rel= stylesheet  href= ../dist/hpcc-viz.min.css \n\n     !--\n    Most scripts are optional, include only what you need\n    @TODO: shoud document dependencies in README\n    -- \n     script src= https://www.google.com/jsapi /script \n     script src= https://maps.googleapis.com/maps/api/js /script \n     script src= ../bower_components/d3/d3.js /script \n     script src= ../bower_components/c3/c3.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/amcharts.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/serial.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/funnel.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/gauge.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/pie.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/radar.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/xy.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/gantt.js /script \n     script src= ../bower_components/dagre/index.js /script \n     script src= ../bower_components/colorbrewer/colorbrewer.js /script \n     script src= ../bower_components/topojson/topojson.js /script \n     script src= ../bower_components/d3-cloud/d3.layout.cloud.js /script \n\n     script src= ../dist/hpcc-viz-common.js /script \n     script src= ../dist/hpcc-viz-api.min.js /script \n     script src= ../dist/hpcc-viz-other.min.js /script \n     script src= ../dist/hpcc-viz-tree.min.js /script \n     script src= ../dist/hpcc-viz-chart.min.js /script \n     script src= ../dist/hpcc-viz-form.min.js /script \n     script src= ../dist/hpcc-viz-graph.min.js /script \n     script src= ../dist/hpcc-viz-c3chart.min.js /script \n     script src= ../dist/hpcc-viz-amchart.min.js /script \n     script src= ../dist/hpcc-viz-google.min.js /script \n     script src= ../dist/hpcc-viz-map.min.js /script \n     script src= ../dist/hpcc-viz-layout.min.js /script \n     script src= ../dist/hpcc-viz-marshaller.min.js /script  /head  /html   See  Examples  for how to create widgets.",
            "title": "Installing &amp; Using Releases"
        },
        {
            "location": "/user_guide/Getting-Started/#development",
            "text": "Install node\n*  Node  Install bower using npm  $ npm install -g bower  Clone repository  git clone https://github.com/hpcc-systems/Visualization.git  Install Node module dependencies  $ cd Visualization\n$ npm install  Install Bower dependencies  $ bower install  Two new folders will be created in the root of the Visualization folder:  \"node_modules\"   \"bower_components\"",
            "title": "Development"
        },
        {
            "location": "/user_guide/Getting-Started/#building-releases-from-source-amd-non-amd",
            "text": "After following the above steps, run the following commands:  Install Gulp  $ npm install -g gulp\n$ gulp  Two new folders will be created in the root of the Visualization folder once again:  \"dist\"   \"dist-amd\"",
            "title": "Building Releases from Source (AMD &amp; Non-AMD)"
        },
        {
            "location": "/user_guide/Getting-Started/#running-unit-tests",
            "text": "$ npm test",
            "title": "Running Unit Tests"
        },
        {
            "location": "/user_guide/Anatomy-of-a-Widget/",
            "text": "Every widget follows the following basic pattern:\n\n It is an object derived from either HTMLWidget or SVGWidget\n\n Implements an interface defined in the API folder (widgets typically fall into one of five categories based on the data they are displaying).\n\n Publish properties:  There is a special prototype.publish call which exposed properties to the consumer.  Once a property is published the object will auto-magically get a \"setter/getter\" method and it will be discoverable and serializable.\n\n Overrides the enter/update/exit methods:  This is where you write your rendering logic, enter is when the widget enters the page, update is when the widget needs to re-render itself and exit is when the widget is being removed from the web page.",
            "title": "Anatomy of a Widget"
        },
        {
            "location": "/user_guide/Chart-Color-(Palette)-Usage/",
            "text": "TODO",
            "title": "Chart Color (Palette) Usage"
        },
        {
            "location": "/user_guide/Widget-Serialization/",
            "text": "TODO",
            "title": "Widget Serialization"
        },
        {
            "location": "/user_guide/Marshaller/",
            "text": "TODO",
            "title": "Marshaller"
        },
        {
            "location": "/FAQ/",
            "text": "Reusing the Marshaller\n\n\nOr how do I take control of the Visualization Placement in MY web page\n\n\n\n\nCreate a new instance of the HipieDDL Marshaller:\n\n\n\n\nthis.marshaller = new HipieDDL.Marshaller();\n\n\n\n\n\n\nInitialize it with the URL to your DDL:\n\n\n\n\nthis.marshaller.url(this._url, function (response) {\n    //  My DIV Creation will go here   ---\n}\n````\n* Create your own DIV elements and place the HipieDDL created widgets within them:\n\n\n\n\nfor (var key in context.marshaller.dashboards) {\n    var dashboard = context.marshaller.dashboards[key];\n    for (var key2 in dashboard.visualizations) {\n        var visualization = dashboard.visualizations[key2];\n        if (visualization.widget) {\n            var width = 640, height = 480;\n            var myDiv = document.createElement(\"DIV\");\n            myDiv.setAttribute(\"style\", \"width: \" + width + \"px;height: \" + height + \"px;\");\n            myDiv.setAttribute(\"display\", \"inline-block\");\n            document.getElementById(\"htmlMarshaller\").appendChild(myDiv);\n            visualization.widget\n                .pos({ x: width / 2, y: width / 2 })\n                .size({ width: width, height: height })\n                .target(myDiv)\n                .render()\n            ;\n        }\n    }\n}\n\n\n* Kick start the whole DDL process, by fetching the default data:\n\n\n\n\nfor (var key in dashboard.datasources) {\n    dashboard.datasources[key].fetchData({}, true);\n}\n\n\n\n* Putting it all together:\n\n\n\n\nthis.marshaller = new HipieDDL.Marshaller();\nthis.marshaller.url(this._url, function (response) {\n    for (var key in context.marshaller.dashboards) {\n        var dashboard = context.marshaller.dashboards[key];\n        for (var key2 in dashboard.visualizations) {\n            var visualization = dashboard.visualizations[key2];\n            if (visualization.widget) {\n                var width = 640, height = 480;\n                var myDiv = document.createElement(\"DIV\");\n                myDiv.setAttribute(\"style\", \"width: \" + width + \"px;height: \" + height + \"px;\");\n                myDiv.setAttribute(\"display\", \"inline-block\");\n                document.getElementById(\"htmlMarshaller\").appendChild(myDiv);\n                visualization.widget\n                    .pos({ x: width / 2, y: width / 2 })\n                    .size({ width: width, height: height })\n                    .target(myDiv)\n                    .render()\n                ;\n            }\n        }\n    }\n    for (var key in dashboard.datasources) {\n        dashboard.datasources[key].fetchData({}, true);\n    }\n    return;\n});\n```\n\n\nFAQs\n\n\n1. I'm hosting on RawGit but my webpage isn't updating.\n\n\nIt takes a few minutes, depending on your usage of the service, traffic on the server etc. so it should be up soon! \n\n\n2.",
            "title": "FAQ"
        },
        {
            "location": "/FAQ/#reusing-the-marshaller",
            "text": "Or how do I take control of the Visualization Placement in MY web page   Create a new instance of the HipieDDL Marshaller:   this.marshaller = new HipieDDL.Marshaller();   Initialize it with the URL to your DDL:   this.marshaller.url(this._url, function (response) {\n    //  My DIV Creation will go here   ---\n}\n````\n* Create your own DIV elements and place the HipieDDL created widgets within them:  for (var key in context.marshaller.dashboards) {\n    var dashboard = context.marshaller.dashboards[key];\n    for (var key2 in dashboard.visualizations) {\n        var visualization = dashboard.visualizations[key2];\n        if (visualization.widget) {\n            var width = 640, height = 480;\n            var myDiv = document.createElement(\"DIV\");\n            myDiv.setAttribute(\"style\", \"width: \" + width + \"px;height: \" + height + \"px;\");\n            myDiv.setAttribute(\"display\", \"inline-block\");\n            document.getElementById(\"htmlMarshaller\").appendChild(myDiv);\n            visualization.widget\n                .pos({ x: width / 2, y: width / 2 })\n                .size({ width: width, height: height })\n                .target(myDiv)\n                .render()\n            ;\n        }\n    }\n}  * Kick start the whole DDL process, by fetching the default data:  for (var key in dashboard.datasources) {\n    dashboard.datasources[key].fetchData({}, true);\n}  \n* Putting it all together:  this.marshaller = new HipieDDL.Marshaller();\nthis.marshaller.url(this._url, function (response) {\n    for (var key in context.marshaller.dashboards) {\n        var dashboard = context.marshaller.dashboards[key];\n        for (var key2 in dashboard.visualizations) {\n            var visualization = dashboard.visualizations[key2];\n            if (visualization.widget) {\n                var width = 640, height = 480;\n                var myDiv = document.createElement(\"DIV\");\n                myDiv.setAttribute(\"style\", \"width: \" + width + \"px;height: \" + height + \"px;\");\n                myDiv.setAttribute(\"display\", \"inline-block\");\n                document.getElementById(\"htmlMarshaller\").appendChild(myDiv);\n                visualization.widget\n                    .pos({ x: width / 2, y: width / 2 })\n                    .size({ width: width, height: height })\n                    .target(myDiv)\n                    .render()\n                ;\n            }\n        }\n    }\n    for (var key in dashboard.datasources) {\n        dashboard.datasources[key].fetchData({}, true);\n    }\n    return;\n});\n```",
            "title": "Reusing the Marshaller"
        },
        {
            "location": "/FAQ/#faqs",
            "text": "1. I'm hosting on RawGit but my webpage isn't updating.  It takes a few minutes, depending on your usage of the service, traffic on the server etc. so it should be up soon!   2.",
            "title": "FAQs"
        },
        {
            "location": "/The-Playground/",
            "text": "The \nPlayground\n is an online, dynamic and user-friendly tool that allows users to alter widgets, primarily with a view to being able to manipulate the data-input into those widgets in an easy manner without having to edit the source code. \n\n\nStructure of the Widget Page\n\n\nThe page is divided into two views, on the left being the widget currently being examined and on the right an editing interface where publish parameters can be manipulated with other features that will now be explained. \n\n\nWidget View\n\n\nThis is located to the left hand side of the page and it is where the widget is primarily displayed with the following options. \n\n\nSelect a Chart\n\n\nOpens a drop-down menu from where the user can choose what widget to interact with.\n\n\nShow Documentation\n\n\nThis will redirect the user to a completely new page with a comprehensive set of documentation on each widget and their members and methods so that the user can easily add or change functionality to the widget that they would like.\n\n\nSelected Widget\n\n\nA view of the chosen widget.\n\n\nSerialization Test\n\n\nBy selecting this tab, the user refreshes the widget if they have made any changes to it in the editing section. \n\n\nSeriaizsation JSON\n\n\nDisplays a JSON file with a list of publish parameters that control how the widget should look. This JSON file is dynamic and is changed every time an edit to one of the publish parameters is made. Effectively, when we switch to the \nSerialization Tab\n tab, it is this JSON file that is refreshed and the view of the new widget can be then seen.\n\n\nEditing View\n\n\nThis is located to the right hand side of the page and comprises of the following tabs that are related to editing the widget that is currently in the view.\n\n\nDiscover Params\n\n\nA long list of publish parameters that are specific to each widget that can be manipulated and upon manipulation will change the Serialization JSON so that the changes can be viewed when the Serialization tab is refreshed. Of particular interest here may be to change the input data into a specific widget, which can be proved to be quite useful and easier than editing the source code. \n\n\nExample Code\n\n\nHere the user is presented with the HTML source code that generates the widget so that they can copy and paste it into their own project if they would like or view it in browser by selecting the \"Demo Example Code (Plain)\" option at the bottom of the page. \n\n\nObject Hierarchy\n\n\nThis tab presents the user with a visualisation that details the dependencies of the currently displayed widget in a linking format. \n\n\nLive Edit CSS\n\n\nThis is a Live Edit CSS interactive view.",
            "title": "Playground"
        },
        {
            "location": "/The-Playground/#structure-of-the-widget-page",
            "text": "The page is divided into two views, on the left being the widget currently being examined and on the right an editing interface where publish parameters can be manipulated with other features that will now be explained.",
            "title": "Structure of the Widget Page"
        },
        {
            "location": "/The-Playground/#widget-view",
            "text": "This is located to the left hand side of the page and it is where the widget is primarily displayed with the following options.   Select a Chart  Opens a drop-down menu from where the user can choose what widget to interact with.  Show Documentation  This will redirect the user to a completely new page with a comprehensive set of documentation on each widget and their members and methods so that the user can easily add or change functionality to the widget that they would like.  Selected Widget  A view of the chosen widget.  Serialization Test  By selecting this tab, the user refreshes the widget if they have made any changes to it in the editing section.   Seriaizsation JSON  Displays a JSON file with a list of publish parameters that control how the widget should look. This JSON file is dynamic and is changed every time an edit to one of the publish parameters is made. Effectively, when we switch to the  Serialization Tab  tab, it is this JSON file that is refreshed and the view of the new widget can be then seen.",
            "title": "Widget View"
        },
        {
            "location": "/The-Playground/#editing-view",
            "text": "This is located to the right hand side of the page and comprises of the following tabs that are related to editing the widget that is currently in the view.  Discover Params  A long list of publish parameters that are specific to each widget that can be manipulated and upon manipulation will change the Serialization JSON so that the changes can be viewed when the Serialization tab is refreshed. Of particular interest here may be to change the input data into a specific widget, which can be proved to be quite useful and easier than editing the source code.   Example Code  Here the user is presented with the HTML source code that generates the widget so that they can copy and paste it into their own project if they would like or view it in browser by selecting the \"Demo Example Code (Plain)\" option at the bottom of the page.   Object Hierarchy  This tab presents the user with a visualisation that details the dependencies of the currently displayed widget in a linking format.   Live Edit CSS  This is a Live Edit CSS interactive view.",
            "title": "Editing View"
        },
        {
            "location": "/Theme-Editor/",
            "text": "The \nTheme Editor\n is an online, dynamical toolkit that enables users to visually alter widgets by changing their publish parameters in the browser, and to integrate the selected widgets into dynamic dashboards that can be used in projects and also downloaded into static image files. \n\n\nStructure of the Theme Editor\n\n\nThe editor is broken into two sections. The main section (to the left of the page) is where the widgets are visualised and in the right-side table menu are some editor options, which relate to being in ThemeMode or not and the publish parameters. Contained in the main section is also a menu-bar that enables us to manipulate the widgets in different ways. The menu-bar consists of the following options \nWidgets\n, \nColors\n, \nFonts\n and \nLayouts\n, and each option will be explained. \n\n\nMain Section\n\n\nWidgets\n\n\nBy selecting the widgets option initialises the new sub-menu-bar that reads \nTheme Editor\n, \nView Themes\n, \nView Serials\n which have the following purposes\n\n\nTheme Editor\n\n\nThis opens a box from where we can decide what widgets we want to include in the dashboard. By selecting a widget it simply will add that widget to the dashboard. \n\n\nView Themes\n\n\nThis opens a new window with a selection of saved themes in JSON format. \n\n\nView Serials\n\n\nThis opens a new window with serialised themes in JSON format.\n\n\nColors\n\n\nBy selecting the Colors option initialises the new sub-menu-bar that reads \nContainer Colors\n, \nOrdinal Palette\n, \nRainbow Palette\n which have the following purposes\n\n\nContainer Colors\n\n\nIn choosing this option, the user can customise the colors of the container within which the widget is contained, whether by using built-in themes or building them from scratch.\n\n\nOrdinal Palette\n\n\nThis will change the colors of, say, the columns in a bar chart but in this case we can choose discrete, unrelated colours from the palette. There are number of options that if chosen will change the components of each individual widget.\n\n\nRainbow Palette\n\n\nThis has the same function as the Ordinal Palette but instead of unrelated colours the palette follows a continuous color change, making visualisations sometimes easier to interpret.\n\n\nFonts\n\n\nBy selecting the Fonts option initialises the new sub-menu-bar that reads \nTitle Font Family\n, \nTitle Font Size\n, \nFont Family\n and [Font Size]((https://github.com/hpcc-systems/Visualization/wiki/Theme-Editor#font-size) which have the following purposes\n\n\nTitle Font Family\n\n\nChanges the font of the title of each widget - available are most standardly used fonts.\n\n\nTitle Font Size\n\n\nChanges the font size of the title of each widget.\n\n\nFont Family\n\n\nChanges the font type of text within each widget.\n\n\nFont Size\n\n\nChanges the font size of the text within each widget.\n\n\nLayout\n\n\nBy selecting the Layout option initialises the new sub-menu-bar that reads \nCell Density\n. Also, inside the layout page, there is a \"drag\" and \"drop\" option where the position of the chosen widgets in the dashboard can be interchanged, extended and moved into entirely new positions. Just drag and drop! \n\n\nCell Density\n\n\nThe cell density is simply a tool to control the number of widgets that are allowed in the dashboard. By increasing the density, it increases the density of each widget, and so decreases the number of allowed widgets within the dashboard. By decreasing the density, more widgets are allowed in the dashboard, though readability issues may occur if the density is too small.\n\n\nRight-Side Table Menu\n\n\nHere I will explain the structure of the right-side table menu. The first drop-down menu here is \"Editor Options\" and depending on whether ThemeMode is selected or not the rest of right-side table menu is different. Effectively, the Theme Editor has two main modes\n\n\n\n\nThemeMode\n\n\nNon-ThemeMode\n\n\n\n\nand depending on the selection of either, the structure of the page is different, and such what follows is a discussion of the structure of the right-side table menu in both different modes. \n\n\nThemeMode\n\n\nBy selecting this option the editor enters a mode where all the widgets are interacted with at once and properties such as container styles and font styles across the dashboard can be changed all at once. The following drop-down menus appear when this option is chosen \nSave/Load Theme\n, \nGrid Options\n, \nChart Colors\n, \nContainer Styles/Colors\n and \nFont Styles/Colors\n\n\nSave/Load Theme\n\n\nHere the user can either load a previously saved theme or save their own one which they have just constructed.\n\n\nGrid Options\n\n\nHere the user can change certain style aspects with respect to grids such as the colors of the XAxis and YAxis Gridline colors.\n\n\nChart Colors\n\n\nHere the chart palettes can be changed in much the same way as \nColors\n.\n\n\nContainer Styles/Colors\n\n\nThe user can change style aspects in relation to the Container in this section.\n\n\nFont Styles/Colors\n\n\nThe user can change the font in a similar way to \nFonts\n but with a number of added options.\n\n\nNon-ThemeMode\n\n\nBy unselecting ThemeMode the user enters into Non-ThemeMode. Non-ThemeMode is characterised by the following drop- down menus \nSave/Load Serial\n and \nChart Properties\n. Conceptually, the main difference in this mode is that the user can make changes that can individually effect each of the widgets and so properties like the column width in a specific bar chart can be changed. \n\n\nSave/Load Serial\n\n\nThis operates much in the same way as \nSave/Load Theme\n but what can be saved in this case are not themes but the serial code that is related to the specific changes that the user will make in this editing mode. Users can also load up previously saved serials.\n\n\nChart Properties\n\n\nIn this drop-down menu the user can change very specific attributes to each widget as mentioned above. There are some technical aspects to being in ThemeMode and Non-ThemeMode from a developers point of view but for now, this is as far as the documentation takes us.",
            "title": "Theme-Editor"
        },
        {
            "location": "/Theme-Editor/#structure-of-the-theme-editor",
            "text": "The editor is broken into two sections. The main section (to the left of the page) is where the widgets are visualised and in the right-side table menu are some editor options, which relate to being in ThemeMode or not and the publish parameters. Contained in the main section is also a menu-bar that enables us to manipulate the widgets in different ways. The menu-bar consists of the following options  Widgets ,  Colors ,  Fonts  and  Layouts , and each option will be explained.   Main Section  Widgets  By selecting the widgets option initialises the new sub-menu-bar that reads  Theme Editor ,  View Themes ,  View Serials  which have the following purposes  Theme Editor  This opens a box from where we can decide what widgets we want to include in the dashboard. By selecting a widget it simply will add that widget to the dashboard.   View Themes  This opens a new window with a selection of saved themes in JSON format.   View Serials  This opens a new window with serialised themes in JSON format.  Colors  By selecting the Colors option initialises the new sub-menu-bar that reads  Container Colors ,  Ordinal Palette ,  Rainbow Palette  which have the following purposes  Container Colors  In choosing this option, the user can customise the colors of the container within which the widget is contained, whether by using built-in themes or building them from scratch.  Ordinal Palette  This will change the colors of, say, the columns in a bar chart but in this case we can choose discrete, unrelated colours from the palette. There are number of options that if chosen will change the components of each individual widget.  Rainbow Palette  This has the same function as the Ordinal Palette but instead of unrelated colours the palette follows a continuous color change, making visualisations sometimes easier to interpret.  Fonts  By selecting the Fonts option initialises the new sub-menu-bar that reads  Title Font Family ,  Title Font Size ,  Font Family  and [Font Size]((https://github.com/hpcc-systems/Visualization/wiki/Theme-Editor#font-size) which have the following purposes  Title Font Family  Changes the font of the title of each widget - available are most standardly used fonts.  Title Font Size  Changes the font size of the title of each widget.  Font Family  Changes the font type of text within each widget.  Font Size  Changes the font size of the text within each widget.  Layout  By selecting the Layout option initialises the new sub-menu-bar that reads  Cell Density . Also, inside the layout page, there is a \"drag\" and \"drop\" option where the position of the chosen widgets in the dashboard can be interchanged, extended and moved into entirely new positions. Just drag and drop!   Cell Density  The cell density is simply a tool to control the number of widgets that are allowed in the dashboard. By increasing the density, it increases the density of each widget, and so decreases the number of allowed widgets within the dashboard. By decreasing the density, more widgets are allowed in the dashboard, though readability issues may occur if the density is too small.  Right-Side Table Menu  Here I will explain the structure of the right-side table menu. The first drop-down menu here is \"Editor Options\" and depending on whether ThemeMode is selected or not the rest of right-side table menu is different. Effectively, the Theme Editor has two main modes   ThemeMode  Non-ThemeMode   and depending on the selection of either, the structure of the page is different, and such what follows is a discussion of the structure of the right-side table menu in both different modes.",
            "title": "Structure of the Theme Editor"
        },
        {
            "location": "/Theme-Editor/#thememode",
            "text": "By selecting this option the editor enters a mode where all the widgets are interacted with at once and properties such as container styles and font styles across the dashboard can be changed all at once. The following drop-down menus appear when this option is chosen  Save/Load Theme ,  Grid Options ,  Chart Colors ,  Container Styles/Colors  and  Font Styles/Colors  Save/Load Theme  Here the user can either load a previously saved theme or save their own one which they have just constructed.  Grid Options  Here the user can change certain style aspects with respect to grids such as the colors of the XAxis and YAxis Gridline colors.  Chart Colors  Here the chart palettes can be changed in much the same way as  Colors .  Container Styles/Colors  The user can change style aspects in relation to the Container in this section.  Font Styles/Colors  The user can change the font in a similar way to  Fonts  but with a number of added options.",
            "title": "ThemeMode"
        },
        {
            "location": "/Theme-Editor/#non-thememode",
            "text": "By unselecting ThemeMode the user enters into Non-ThemeMode. Non-ThemeMode is characterised by the following drop- down menus  Save/Load Serial  and  Chart Properties . Conceptually, the main difference in this mode is that the user can make changes that can individually effect each of the widgets and so properties like the column width in a specific bar chart can be changed.   Save/Load Serial  This operates much in the same way as  Save/Load Theme  but what can be saved in this case are not themes but the serial code that is related to the specific changes that the user will make in this editing mode. Users can also load up previously saved serials.  Chart Properties  In this drop-down menu the user can change very specific attributes to each widget as mentioned above. There are some technical aspects to being in ThemeMode and Non-ThemeMode from a developers point of view but for now, this is as far as the documentation takes us.",
            "title": "Non-ThemeMode"
        },
        {
            "location": "/examples/AMD-Examples/",
            "text": "AMD Examples\n\n\nThe below examples illustrate how to display a widget from scratch, using AMD (RequireJS):\n\n\nHPCC Column Chart (CDN)\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \n!-- Configuration Scripts --\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist-amd/hpcc-viz.js\n/script\n \n!-- RequireJS Library Auto Loads --\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist-amd/hpcc-bundles.js\n/script\n\n    \nscript\n \n        require.config({\n            paths: {\n                \nsrc\n: \n//viz.hpccsystems.com/v1.6.6/dist-amd\n,\n                \nfont-awesome\n: \n//viz.hpccsystems.com/v1.6.6/dist-amd/font-awesome/css/font-awesome.min\n,\n                \namchartsImg\n: \n//viz.hpccsystems.com/v1.6.6/dist-amd/img/amcharts/\n /* Only needed if using AmCharts */\n            }\n        });\n    \n/script\n\n\n/head\n\n    \nbody\n\n        \n!-- HPCC Column Chart Widget --\n\n        \ndiv id=\nwidget-wrapper\n/div\n\n        \nscript\n\n            require([\nsrc/chart/Column\n], function (Column) {\n                var columnWidget = new Column()\n                    .size({width:500,height:300})\n                    .target(\nwidget-wrapper\n)\n                    .columns([\nSubject\n, \nYear 1\n])   \n                    .data([\n                        [\nGeography\n, 75],\n                        [\nEnglish\n, 45],\n                        [\nMath\n, 98],\n                        [\nScience\n, 66]\n                    ])\n                    .on(\nclick\n,  function(d) { console.log('Override Click: ' + JSON.stringify(d)); })\n                    .render()\n                ;\n            });\n        \n/script\n\n    \n/body\n\n\n/html",
            "title": "AMD Examples"
        },
        {
            "location": "/examples/AMD-Examples/#amd-examples",
            "text": "The below examples illustrate how to display a widget from scratch, using AMD (RequireJS):  HPCC Column Chart (CDN)  !doctype html  html  head \n     meta charset= utf-8 \n     !-- Configuration Scripts -- \n     script src= //viz.hpccsystems.com/v1.6.6/dist-amd/hpcc-viz.js /script   !-- RequireJS Library Auto Loads -- \n     script src= //viz.hpccsystems.com/v1.6.6/dist-amd/hpcc-bundles.js /script \n     script  \n        require.config({\n            paths: {\n                 src :  //viz.hpccsystems.com/v1.6.6/dist-amd ,\n                 font-awesome :  //viz.hpccsystems.com/v1.6.6/dist-amd/font-awesome/css/font-awesome.min ,\n                 amchartsImg :  //viz.hpccsystems.com/v1.6.6/dist-amd/img/amcharts/  /* Only needed if using AmCharts */\n            }\n        });\n     /script  /head \n     body \n         !-- HPCC Column Chart Widget -- \n         div id= widget-wrapper /div \n         script \n            require([ src/chart/Column ], function (Column) {\n                var columnWidget = new Column()\n                    .size({width:500,height:300})\n                    .target( widget-wrapper )\n                    .columns([ Subject ,  Year 1 ])   \n                    .data([\n                        [ Geography , 75],\n                        [ English , 45],\n                        [ Math , 98],\n                        [ Science , 66]\n                    ])\n                    .on( click ,  function(d) { console.log('Override Click: ' + JSON.stringify(d)); })\n                    .render()\n                ;\n            });\n         /script \n     /body  /html",
            "title": "AMD Examples"
        },
        {
            "location": "/examples/Non-AMD-Examples/",
            "text": "Non-AMD Examples\n\n\nThe below examples illustrate how to display a widget from scratch, using the Non-AMD Release:\n\n\nHPCC Column Chart (CDN)\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nlink rel=\nstylesheet\n href=\n//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\n /\n\n    \nlink rel=\nstylesheet\n href=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz.min.css\n\n    \nscript src=\n//cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\n/script\n\n    \nscript src=\n//cdn.rawgit.com/jeanlauliac/colorbrewer/v1.0.0/colorbrewer.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-common.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-layout.min.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-api.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-other.min.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-chart.min.js\n/script\n\n\n/head\n\n    \nbody\n\n        \n!-- HPCC Column Chart Widget --\n\n        \ndiv id=\nwidget-wrapper\n/div\n\n        \nscript\n\n            var columnWidget = new chart_Column()\n                .size({width:500,height:300})\n                .target(\nwidget-wrapper\n)\n                .columns([\nSubject\n, \nYear 1\n])\n                .data([\n                    [\nGeography\n, 75],\n                    [\nEnglish\n, 45],\n                    [\nMath\n, 98],\n                    [\nScience\n, 66]\n                ])\n                .on(\nclick\n,  function(d) { console.log('Override Click: ' + JSON.stringify(d)); })\n                .render()\n            ;\n        \n/script\n\n    \n/body\n\n\n/html",
            "title": "Non-AMD Examples"
        },
        {
            "location": "/examples/Non-AMD-Examples/#non-amd-examples",
            "text": "The below examples illustrate how to display a widget from scratch, using the Non-AMD Release:  HPCC Column Chart (CDN)  !doctype html  html  head \n     meta charset= utf-8 \n     link rel= stylesheet  href= //maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css  / \n     link rel= stylesheet  href= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz.min.css \n     script src= //cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js /script \n     script src= //cdn.rawgit.com/jeanlauliac/colorbrewer/v1.0.0/colorbrewer.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-common.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-layout.min.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-api.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-other.min.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-chart.min.js /script  /head \n     body \n         !-- HPCC Column Chart Widget -- \n         div id= widget-wrapper /div \n         script \n            var columnWidget = new chart_Column()\n                .size({width:500,height:300})\n                .target( widget-wrapper )\n                .columns([ Subject ,  Year 1 ])\n                .data([\n                    [ Geography , 75],\n                    [ English , 45],\n                    [ Math , 98],\n                    [ Science , 66]\n                ])\n                .on( click ,  function(d) { console.log('Override Click: ' + JSON.stringify(d)); })\n                .render()\n            ;\n         /script \n     /body  /html",
            "title": "Non-AMD Examples"
        },
        {
            "location": "/examples/Non-AMD-Examples/",
            "text": "Non-AMD Examples\n\n\nThe below examples illustrate how to display a widget from scratch, using the Non-AMD Release:\n\n\nHPCC Column Chart (CDN)\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nlink rel=\nstylesheet\n href=\n//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\n /\n\n    \nlink rel=\nstylesheet\n href=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz.min.css\n\n    \nscript src=\n//cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js\n/script\n\n    \nscript src=\n//cdn.rawgit.com/jeanlauliac/colorbrewer/v1.0.0/colorbrewer.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-common.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-layout.min.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-api.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-other.min.js\n/script\n\n    \nscript src=\n//viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-chart.min.js\n/script\n\n\n/head\n\n    \nbody\n\n        \n!-- HPCC Column Chart Widget --\n\n        \ndiv id=\nwidget-wrapper\n/div\n\n        \nscript\n\n            var columnWidget = new chart_Column()\n                .size({width:500,height:300})\n                .target(\nwidget-wrapper\n)\n                .columns([\nSubject\n, \nYear 1\n])\n                .data([\n                    [\nGeography\n, 75],\n                    [\nEnglish\n, 45],\n                    [\nMath\n, 98],\n                    [\nScience\n, 66]\n                ])\n                .on(\nclick\n,  function(d) { console.log('Override Click: ' + JSON.stringify(d)); })\n                .render()\n            ;\n        \n/script\n\n    \n/body\n\n\n/html",
            "title": "Marshaller Examples"
        },
        {
            "location": "/examples/Non-AMD-Examples/#non-amd-examples",
            "text": "The below examples illustrate how to display a widget from scratch, using the Non-AMD Release:  HPCC Column Chart (CDN)  !doctype html  html  head \n     meta charset= utf-8 \n     link rel= stylesheet  href= //maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css  / \n     link rel= stylesheet  href= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz.min.css \n     script src= //cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js /script \n     script src= //cdn.rawgit.com/jeanlauliac/colorbrewer/v1.0.0/colorbrewer.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-common.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-layout.min.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-api.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-other.min.js /script \n     script src= //viz.hpccsystems.com/v1.6.6/dist/hpcc-viz-chart.min.js /script  /head \n     body \n         !-- HPCC Column Chart Widget -- \n         div id= widget-wrapper /div \n         script \n            var columnWidget = new chart_Column()\n                .size({width:500,height:300})\n                .target( widget-wrapper )\n                .columns([ Subject ,  Year 1 ])\n                .data([\n                    [ Geography , 75],\n                    [ English , 45],\n                    [ Math , 98],\n                    [ Science , 66]\n                ])\n                .on( click ,  function(d) { console.log('Override Click: ' + JSON.stringify(d)); })\n                .render()\n            ;\n         /script \n     /body  /html",
            "title": "Non-AMD Examples"
        }
    ]
}