{
    "docs": [
        {
            "location": "/Anatomy-of-a-Widget/", 
            "text": "Every widget follows the following basic pattern:\n\n It is an object derived from either HTMLWidget or SVGWidget\n\n Implements an interface defined in the API folder (widgets typically fall into one of five categories based on the data they are displaying).\n\n Publish properties:  There is a special prototype.publish call which exposed properties to the consumer.  Once a property is published the object will auto-magically get a \"setter/getter\" method and it will be discoverable and serializable.\n\n Overrides the enter/update/exit methods:  This is where you write your rendering logic, enter is when the widget enters the page, update is when the widget needs to re-render itself and exit is when the widget is being removed from the web page.", 
            "title": "Anatomy of a Widget"
        }, 
        {
            "location": "/Bower-Releases/", 
            "text": "Install node\n* \n[Node] (https://nodejs.org/)\n\n\nInstall bower using npm\n\n\n$ npm install -g bower\n\n\n\nIn forked repo get dependencies via bower, which will create a bower.json file, detailing the dependencies\n\n\n$ bower install\n\n\n\nWe can now go about developing. To build a simple .html file with a widget \n\n\n$ mkdir my_widget\n$ cd my_widget\n$ touch my_first_widget.html\n\n\n\nCopy and paste code of a widget into the file, refer to the examples given \nhere\n\n\nmy_first_widget.html\n\n\n\nAdd, commit and push to your repo and then refer to \nhere\n on how to host your visualisations online.", 
            "title": "Bower Releases"
        }, 
        {
            "location": "/Building-from-sources/", 
            "text": "This page is aimed at developers who wish to build the framework from sources i.e build their own widgets etc. into the framework. To begin this discussion, the most appropriate place to begin is the file system. \n\n\nFile Structure\n\n\nThe structure is organised in the following manner\n\n\napps demos src extra_files\n\n\nand changing into\n\n\n cd src\n\n\n\nwill bring us into all of the source files for each of the widgets. The widgets all use the d3 javascript library for the visualisation, the framework is not restricted to this paradigm and other libraries like Raphael and Paper can be used, depending on your own preference. Bear in mind, if using new libraries the dependencies will have to be listed in config.js and updated by bower. \n\n\nTo build your own widgets, just create your own directory and add as much as you would like. \n\n\nChanging into \n\n\n cd demos\n\n\n\nwill bring us into the (current) demo webpages hosted on RawGit. To add content to your own webpage follow the examples in the \nhttps://github.com/hpcc-systems/Visualization/wiki#getting-started\n section and it shouldn't be too difficult to add your own custom widgets.", 
            "title": "Building from Sources"
        }, 
        {
            "location": "/Building-from-sources/#file-structure", 
            "text": "The structure is organised in the following manner  apps demos src extra_files  and changing into   cd src  will bring us into all of the source files for each of the widgets. The widgets all use the d3 javascript library for the visualisation, the framework is not restricted to this paradigm and other libraries like Raphael and Paper can be used, depending on your own preference. Bear in mind, if using new libraries the dependencies will have to be listed in config.js and updated by bower.   To build your own widgets, just create your own directory and add as much as you would like.   Changing into    cd demos  will bring us into the (current) demo webpages hosted on RawGit. To add content to your own webpage follow the examples in the  https://github.com/hpcc-systems/Visualization/wiki#getting-started  section and it shouldn't be too difficult to add your own custom widgets.", 
            "title": "File Structure"
        }, 
        {
            "location": "/Chart-Color-(Palette)-Usage/", 
            "text": "TODO", 
            "title": "Chart Color (Palette) Usage"
        }, 
        {
            "location": "/Examples/", 
            "text": "The below examples illustrate how to build, from scratch, a widget in both its AMD and non AMD form. By AMD form, we simply mean that the mechanism from which the javascript files are initialised and loaded is [RequireJS]  (http://requirejs.org/) encapsulation. By non-AMD form we mean that the library files are built to load without the use of RequireJS or any Module Dependency Manager via the \nGulp\n build system. (Gulp builds both NON-AMD and AMD versions of the library).  Comments are used when appropriate.\n\n\nHello World\n\n\nAMD version\n\n\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \n!-- CSS Styling --\n\n    \nstyle\n\n        .common_TextBox .common_Shape {\n            fill: #dcf1ff;\n            stroke: #1f77b4;\n        }\n\n        .common_Text {\n            fill: #000;\n            font-size: 12px;\n        }\n\n        .common_Shape {\n            fill: #1f77b4;\n            stroke: #1f77b4;\n        }\n\n\n    \n/style\n\n    \n!-- RequireJS Library --\n\n    \nscript src=\nhttp://rawgit.com/jrburke/requirejs/2.1.17/require.js\n/script\n\n    \n!-- Configuration Scripts --\n\n    \nscript src=\n../dist-amd/hpcc-viz.js\n/script\n\n    \nscript src=\n../dist-amd/hpcc-bundles.js\n/script\n\n    \nscript\n require.config({\n        paths: {\n            \nfont-awesome\n: \n../dist-amd/font-awesome/css/font-awesome.min\n,\n            \nsrc\n: \n../dist-amd\n\n        }\n    });\n    \n/script\n\n    \n!-- TextBox Widget Script --\n\n    \nscript\n\n        require([\n../src/common/TextBox\n], function (TextBox) {\n            new TextBox()\n                    .target(\nhelloWorld\n)\n                    .text(\nHello\\nWorld!\n)\n                    .render()\n            ;\n        });\n    \n/script\n\n\n/head\n\n\nbody\n\n\ndiv id=\nhelloWorld\n style=\nwidth:400px; height:400px\n\n\n/div\n\n\n/body\n\n\n/html\n\n\n\n\n\n\nNon-AMD version\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta http-equiv=\nX-UA-Compatible\n content=\nchrome=1\n\n    \n!-- CSS Styling --\n\n    \nstyle\n\n        .common_TextBox .common_Shape {\n            fill: #dcf1ff;\n            stroke: #1f77b4;\n        }\n\n        .common_Text {\n            fill: #000;\n            font-size: 12px;\n        }\n\n        .common_Shape {\n            fill: #1f77b4;\n            stroke: #1f77b4;\n        }\n\n        .thumb {\n            font-size: 12px;\n            padding: 2px 2px 2px 2px;\n            background: #f8f8f8;\n            border-radius: 5px;\n            border: 1px solid #e5e5e5;\n            display: inline-block;\n            overflow: hidden;\n        }\n\n        .small.thumb {\n            width: 100px;\n            height: 100px;\n        }\n    \n/style\n\n    \nlink rel=\nstylesheet\n href=\n../dist/hpcc-viz.min.css\n\n    \n!-- google api --\n\n    \nscript src=\nhttps://www.google.com/jsapi\n/script\n\n    \n!-- d3 --\n\n    \nscript src=\n../bower_components/d3/d3.js\n/script\n\n    \n!-- for gulp.js --\n\n    \nscript src=\n../dist/hpcc-viz-common.js\n/script\n\n    \nscript\n\n        var graph = null;\n        google.load(\nvisualization\n, \n1\n, {\n            callback: doTest,\n            packages: [\ncorechart\n]\n        });\n\n        function doTest() {\n            new common_TextBox()\n                    .text(\nText\\nBox\n)\n                    .target(\ntextBox\n)\n                    .render()\n            ;\n        }\n    \n/script\n\n\n/head\n\n\nbody onload=\ndoTest\n\n\ndiv id=\ntextBox\n class=\nsmall thumb\n/div\n\n\n/body\n\n\n/html\n\n\n\n\n\nAM Bar Chart\n\n\nAMD Version\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \n!-- Require Script --\n \n    \nscript src=\nhttp://rawgit.com/jrburke/requirejs/2.1.17/require.js\n/script\n\n    \n!-- Configuration Script --\n\n    \nscript\n\n        require.config({\n            paths: {\n                \ncss\n: \nhttp://rawgit.com/guybedford/require-css/0.1.8/css.min\n,\n                \ncss-builder\n: \nhttp://rawgit.com/guybedford/require-css/0.1.8/css-builder.min\n,\n                \nd3\n: \nhttp://rawgit.com/mbostock/d3/v3.5.5/d3.min\n,\n                \ncolorbrewer\n: \nhttp://rawgit.com/jeanlauliac/colorbrewer/v1.0.0/colorbrewer\n,\n                \namcharts\n: \nhttp://rawgit.com/arturgspb/bower-amcharts/v3.13.3/dist/amcharts/amcharts\n,\n                \namcharts.serial\n: \nhttp://rawgit.com/arturgspb/bower-amcharts/v3.13.3/dist/amcharts/serial\n,\n                \namcharts.xy\n: \nhttp://rawgit.com/arturgspb/bower-amcharts/v3.13.3/dist/amcharts/xy\n\n            } ,\n\n            shim: {\n                \namcharts.serial\n: {\n                    deps: [\namcharts\n],\n                    exports: \nAmCharts\n,\n                    init: function() {\n                        AmCharts.isReady = true;\n                    }\n                },\n                \namcharts.xy\n: {\n                    deps: [\namcharts\n],\n                    exports: \nAmCharts\n,\n                    init: function() {\n                        AmCharts.isReady = true;\n                    }\n                }\n            }\n        });\n    \n/script\n\n    \n!-- Widget Script --\n\n    \nscript\n\n        require([\n../src/amchart/Bar\n], function (AmBar) {\n            new AmBar()\n                    .target(\nambar\n)\n                    .columns([\nLetter\n, \nFrequency\n])\n                    .data([\n                        ['A', .08167],\n                        ['B', .01492],\n                        ['C', .02782],\n                        ['D', .04253],\n                        ['E', .12702],\n                        ['F', .02288],\n                        ['G', .02015],\n                        ['H', .06094],\n                        ['I', .06966],\n                        ['J', .00153],\n                        ['K', .00772],\n                        ['L', .04025],\n                        ['M', .02406],\n                        ['N', .06749],\n                        ['O', .07507],\n                        ['P', .01929],\n                        ['Q', .00095],\n                        ['R', .05987],\n                        ['S', .06327],\n                        ['T', .09056],\n                        ['U', .02758],\n                        ['V', .00978],\n                        ['W', .02360],\n                        ['X', .00150],\n                        ['Y', .01974],\n                        ['Z', .00074],\n                    ])\n                    .render()\n            ;\n        });\n    \n/script\n\n\n/head\n\n\nbody\n\n\nh1\nFrequency of Letters in a sentence \n/h1\n\n\ndiv id=\nambar\n class=\nxlarge thumb\n\n\n/div\n\n\n/body\n\n\n/html\n\n\n\n\n\nNon-AMD Version\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta http-equiv=\nX-UA-Compatible\n content=\nchrome=1\n\n    \ntitle\nNon-AMD Am Bar Chart\n/title\n\n    \nstyle\n\n        .thumb {\n            font-size: 12px;\n            padding: 2px 2px 2px 2px;\n            background: #f8f8f8;\n            border-radius: 5px;\n            border: 1px solid #e5e5e5;\n            display: inline-block;\n            overflow: hidden;\n        }\n        .small.thumb {\n            width: 100px;\n            height: 100px;\n        }\n        .large.thumb {\n            width: 500px;\n            height: 500px;\n        }\n    \n/style\n\n\n\n    \nscript src=\nhttps://www.google.com/jsapi\n/script\n\n    \nscript src=\n../bower_components/d3/d3.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/amcharts.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/serial.js\n/script\n\n    \nscript src=\n../bower_components/colorbrewer/colorbrewer.js\n/script\n\n\n    \nscript src=\n../dist/hpcc-viz-common.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-api.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-chart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-amchart.min.js\n/script\n\n\n\n    \nscript\n\n        var graph = null;\n        google.load(\nvisualization\n, \n1\n, {\n            callback: doTest,\n            packages: [\ncorechart\n]\n        });\n        function doTest() {\n            var timeoutStep = 500;\n            var timeoutIdx = 0;\n            setTimeout(function () {\n                displayCharts();\n            }, timeoutStep * timeoutIdx++);\n            function displayCharts() {\n                new amchart_Bar()\n                        .target(\nambar\n)\n                        .columns([\nLetter\n, \nFrequency\n])\n                        .data([\n                            ['A', .08167],\n                            ['B', .01492],\n                            ['C', .02782],\n                            ['D', .04253],\n                            ['E', .12702],\n                            ['F', .02288],\n                            ['G', .02015],\n                            ['H', .06094],\n                            ['I', .06966],\n                            ['J', .00153],\n                            ['K', .00772],\n                            ['L', .04025],\n                            ['M', .02406],\n                            ['N', .06749],\n                            ['O', .07507],\n                            ['P', .01929],\n                            ['Q', .00095],\n                            ['R', .05987],\n                            ['S', .06327],\n                            ['T', .09056],\n                            ['U', .02758],\n                            ['V', .00978],\n                            ['W', .02360],\n                            ['X', .00150],\n                            ['Y', .01974],\n                            ['Z', .00074],\n                        ])\n                        .render()\n                ;\n            }\n        }\n    \n/script\n\n\n\n\n/head\n\n\n\n\nbody\n\n\n\n\ndiv id=\nambar\n class=\nlarge thumb\n/div\n\n\n\n\n/body\n\n\n/html\n \n\n\n\n\nPie Chart\n\n\nAMD Version\n\n\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nscript src=\nhttp://rawgit.com/jrburke/requirejs/2.1.17/require.js\n/script\n\n    \nlink rel=\nstylesheet\n type=\ntext/css\n href=\ntest.css\n\n    \nscript src=\n../dist-amd/hpcc-viz.js\n/script\n\n    \nscript src=\n../dist-amd/hpcc-bundles.js\n/script\n\n    \nscript\n require.config({\n        paths: {\n            \nfont-awesome\n: \n../dist-amd/font-awesome/css/font-awesome.min\n,\n            \nsrc\n: \n../dist-amd\n\n        }\n    });\n    \n/script\ncd \n    \nscript\n\n        require([\n../src/google/Pie\n], function (GPie) {\n            new GPie()\n                    .target(\ngpie\n)\n                    .columns([\nOperating System\n, \nMarket Share\n])\n                    .data([\n                        [\nWindows 8\n, 23.5],\n                        [\nWindows 7\n, 51.1],\n                        [\nWindows Vista\n, 0.7],\n                        [\nOther Windows\n, 0.5],\n                        [\nWindows XP\n,3.3],\n                        [\nLinux\n,5.5],\n                        [\nMac\n,10.2],\n                        [\nMobile\n,5.4]\n                    ])\n                    .render()\n            ;\n        });\n    \n/script\n\n\n/head\n\n\nbody\n\n\nh1\nPopularity of Operating Systems \n/h1\n\n\ndiv id=\ngpie\n class=\nxlarge thumb\n/div\n\n\n/div\n\n\n\n/body\n\n\n/html\n\n\n\n\n\n\n[Non-AMD Version] (http://rawgit.com/Evan1415/hpcc_viz/master/HELLO_WORLD_EXAMPLES/pie_namd.html)\n\n\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta http-equiv=\nX-UA-Compatible\n content=\nchrome=1\n\n    \ntitle\nHPCC Systems - Visualization Framework\n/title\n\n    \nlink rel=\nstylesheet\n href=\ntest.css\n\n    \n!--\n    Most scripts are optional, include only what you need\n    @TODO: shoud document dependencies in README\n    --\n\n    \nscript src=\nhttps://www.google.com/jsapi\n/script\n\n    \nscript src=\nhttps://maps.googleapis.com/maps/api/js\n/script\n\n    \nscript src=\n../bower_components/d3/d3.js\n/script\n\n    \nscript src=\n../bower_components/c3/c3.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/amcharts.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/serial.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/funnel.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/gauge.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/pie.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/radar.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/xy.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/gantt.js\n/script\n\n    \nscript src=\n../bower_components/dagre/index.js\n/script\n\n    \nscript src=\n../bower_components/colorbrewer/colorbrewer.js\n/script\n\n    \nscript src=\n../bower_components/topojson/topojson.js\n/script\n\n    \nscript src=\n../bower_components/d3-cloud/d3.layout.cloud.js\n/script\n\n\n    \nscript src=\n../dist/hpcc-viz-common.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-api.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-other.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-tree.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-chart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-graph.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-c3chart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-amchart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-google.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-map.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-layout.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-marshaller.min.js\n/script\n\n\n    \nscript\n\n        var graph = null;\n        google.load(\nvisualization\n, \n1\n, {\n            callback: doTest,\n            packages: [\ncorechart\n]\n        });\n\n        function doTest() {\n            new google_Pie()\n                    .target(\ngpie\n)\n                    .columns([\nOperating System\n, \nMarket Share\n])\n                    .data([\n                        [\nWindows 8\n, 23.5],\n                        [\nWindows 7\n, 51.1],\n                        [\nWindows Vista\n, 0.7],\n                        [\nOther Windows\n, 0.5],\n                        [\nWindows XP\n, 3.3],\n                        [\nLinux\n, 5.5],\n                        [\nMac\n, 10.2],\n                        [\nMobile\n, 5.4]\n                    ])\n                    .render()\n\n        }\n    \n/script\n\n\n/head\n\n\nbody onload=\ndoTest\n\n\ndiv id=\ngpie\n class=\nxlarge thumb\n/div\n\n\n/body\n\n\n/html\n\n\n\n\n\nMarshaller\n\n\nAMD Version\n\n\nIn this version of the Marshaller, we present an interactive, dynamic widget that visualises electoral data from the United States. \n\n\n\n\n!DOCTYPE html\n\n\nhtml\n\n\nhead\n\n    \nscript src=\nhttp://rawgit.com/jrburke/requirejs/2.1.17/require.js\n/script\n\n    \nscript src=\n../dist-amd/hpcc-viz.js\n/script\n\n    \nscript src=\n../dist-amd/hpcc-bundles.js\n/script\n\n    \nscript\n require.config({\n        paths: {\n            \nfont-awesome\n: \n../dist-amd/font-awesome/css/font-awesome.min\n,\n            \nsrc\n: \n../dist-amd\n\n        }\n    });\n    \n/script\n\n\n/head\n\n\nbody\n\n\nscript\n\n    require([\nsrc/marshaller/Graph\n], function (Graph) {\n        new Graph()\n                .size({width:800,height:500})\n                .target(\nwidget-wrapper\n)\n                .testData()\n                .render()\n        ;\n    });\n\n/script\n\n\ndiv id=\nwidget-wrapper\n/div\n\n\n/body\n\n\n/html\n\n\n\n\n\nNon-AMD Version\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nmeta http-equiv=\nX-UA-Compatible\n content=\nchrome=1\n\n    \ntitle\nHPCC Systems - Visualization Framework\n/title\n\n    \nlink rel=\nstylesheet\n href=\ntest.css\n\n\n    \nscript src=\nhttps://www.google.com/jsapi\n/script\n\n    \nscript src=\nhttps://maps.googleapis.com/maps/api/js\n/script\n\n    \nscript src=\n../bower_components/d3/d3.js\n/script\n\n    \nscript src=\n../bower_components/c3/c3.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/amcharts.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/serial.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/funnel.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/gauge.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/pie.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/radar.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/xy.js\n/script\n\n    \nscript src=\n../bower_components/amcharts/dist/amcharts/gantt.js\n/script\n\n    \nscript src=\n../bower_components/dagre/index.js\n/script\n\n    \nscript src=\n../bower_components/colorbrewer/colorbrewer.js\n/script\n\n    \nscript src=\n../bower_components/topojson/topojson.js\n/script\n\n    \nscript src=\n../bower_components/d3-cloud/d3.layout.cloud.js\n/script\n\n\n    \nscript src=\n../dist/hpcc-viz-common.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-api.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-other.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-tree.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-chart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-graph.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-c3chart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-amchart.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-google.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-map.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-layout.min.js\n/script\n\n    \nscript src=\n../dist/hpcc-viz-marshaller.min.js\n/script\n\n\n    \nscript\n\n        var graph = null;\n        google.load(\nvisualization\n, \n1\n, {\n            callback: doTest,\n            packages: [\ncorechart\n]\n        });\n\n        function doTest() {\n            new marshaller_HTML()\n                    .size({width:800,height:500})\n                    .target(\nwidget-wrapper\n)\n                    .testData()\n                    .render()\n            ;\n        }\n    \n/script\n\n\n\n\n/head\n\n\nbody onload=\ndoTest\n\n\ndiv id=\nwidget-wrapper\n/div\n\n\n/body\n\n\n/html", 
            "title": "Examples"
        }, 
        {
            "location": "/Examples/#hello-world", 
            "text": "AMD version   !doctype html  html  head \n     meta charset= utf-8 \n     !-- CSS Styling -- \n     style \n        .common_TextBox .common_Shape {\n            fill: #dcf1ff;\n            stroke: #1f77b4;\n        }\n\n        .common_Text {\n            fill: #000;\n            font-size: 12px;\n        }\n\n        .common_Shape {\n            fill: #1f77b4;\n            stroke: #1f77b4;\n        }\n\n\n     /style \n     !-- RequireJS Library -- \n     script src= http://rawgit.com/jrburke/requirejs/2.1.17/require.js /script \n     !-- Configuration Scripts -- \n     script src= ../dist-amd/hpcc-viz.js /script \n     script src= ../dist-amd/hpcc-bundles.js /script \n     script  require.config({\n        paths: {\n             font-awesome :  ../dist-amd/font-awesome/css/font-awesome.min ,\n             src :  ../dist-amd \n        }\n    });\n     /script \n     !-- TextBox Widget Script -- \n     script \n        require([ ../src/common/TextBox ], function (TextBox) {\n            new TextBox()\n                    .target( helloWorld )\n                    .text( Hello\\nWorld! )\n                    .render()\n            ;\n        });\n     /script  /head  body  div id= helloWorld  style= width:400px; height:400px  /div  /body  /html   Non-AMD version  !doctype html  html  head \n     meta charset= utf-8 \n     meta http-equiv= X-UA-Compatible  content= chrome=1 \n     !-- CSS Styling -- \n     style \n        .common_TextBox .common_Shape {\n            fill: #dcf1ff;\n            stroke: #1f77b4;\n        }\n\n        .common_Text {\n            fill: #000;\n            font-size: 12px;\n        }\n\n        .common_Shape {\n            fill: #1f77b4;\n            stroke: #1f77b4;\n        }\n\n        .thumb {\n            font-size: 12px;\n            padding: 2px 2px 2px 2px;\n            background: #f8f8f8;\n            border-radius: 5px;\n            border: 1px solid #e5e5e5;\n            display: inline-block;\n            overflow: hidden;\n        }\n\n        .small.thumb {\n            width: 100px;\n            height: 100px;\n        }\n     /style \n     link rel= stylesheet  href= ../dist/hpcc-viz.min.css \n     !-- google api -- \n     script src= https://www.google.com/jsapi /script \n     !-- d3 -- \n     script src= ../bower_components/d3/d3.js /script \n     !-- for gulp.js -- \n     script src= ../dist/hpcc-viz-common.js /script \n     script \n        var graph = null;\n        google.load( visualization ,  1 , {\n            callback: doTest,\n            packages: [ corechart ]\n        });\n\n        function doTest() {\n            new common_TextBox()\n                    .text( Text\\nBox )\n                    .target( textBox )\n                    .render()\n            ;\n        }\n     /script  /head  body onload= doTest  div id= textBox  class= small thumb /div  /body  /html", 
            "title": "Hello World"
        }, 
        {
            "location": "/Examples/#am-bar-chart", 
            "text": "AMD Version  !doctype html  html  head \n     meta charset= utf-8 \n     !-- Require Script --  \n     script src= http://rawgit.com/jrburke/requirejs/2.1.17/require.js /script \n     !-- Configuration Script -- \n     script \n        require.config({\n            paths: {\n                 css :  http://rawgit.com/guybedford/require-css/0.1.8/css.min ,\n                 css-builder :  http://rawgit.com/guybedford/require-css/0.1.8/css-builder.min ,\n                 d3 :  http://rawgit.com/mbostock/d3/v3.5.5/d3.min ,\n                 colorbrewer :  http://rawgit.com/jeanlauliac/colorbrewer/v1.0.0/colorbrewer ,\n                 amcharts :  http://rawgit.com/arturgspb/bower-amcharts/v3.13.3/dist/amcharts/amcharts ,\n                 amcharts.serial :  http://rawgit.com/arturgspb/bower-amcharts/v3.13.3/dist/amcharts/serial ,\n                 amcharts.xy :  http://rawgit.com/arturgspb/bower-amcharts/v3.13.3/dist/amcharts/xy \n            } ,\n\n            shim: {\n                 amcharts.serial : {\n                    deps: [ amcharts ],\n                    exports:  AmCharts ,\n                    init: function() {\n                        AmCharts.isReady = true;\n                    }\n                },\n                 amcharts.xy : {\n                    deps: [ amcharts ],\n                    exports:  AmCharts ,\n                    init: function() {\n                        AmCharts.isReady = true;\n                    }\n                }\n            }\n        });\n     /script \n     !-- Widget Script -- \n     script \n        require([ ../src/amchart/Bar ], function (AmBar) {\n            new AmBar()\n                    .target( ambar )\n                    .columns([ Letter ,  Frequency ])\n                    .data([\n                        ['A', .08167],\n                        ['B', .01492],\n                        ['C', .02782],\n                        ['D', .04253],\n                        ['E', .12702],\n                        ['F', .02288],\n                        ['G', .02015],\n                        ['H', .06094],\n                        ['I', .06966],\n                        ['J', .00153],\n                        ['K', .00772],\n                        ['L', .04025],\n                        ['M', .02406],\n                        ['N', .06749],\n                        ['O', .07507],\n                        ['P', .01929],\n                        ['Q', .00095],\n                        ['R', .05987],\n                        ['S', .06327],\n                        ['T', .09056],\n                        ['U', .02758],\n                        ['V', .00978],\n                        ['W', .02360],\n                        ['X', .00150],\n                        ['Y', .01974],\n                        ['Z', .00074],\n                    ])\n                    .render()\n            ;\n        });\n     /script  /head  body  h1 Frequency of Letters in a sentence  /h1  div id= ambar  class= xlarge thumb  /div  /body  /html   Non-AMD Version  !doctype html  html  head \n     meta charset= utf-8 \n     meta http-equiv= X-UA-Compatible  content= chrome=1 \n     title Non-AMD Am Bar Chart /title \n     style \n        .thumb {\n            font-size: 12px;\n            padding: 2px 2px 2px 2px;\n            background: #f8f8f8;\n            border-radius: 5px;\n            border: 1px solid #e5e5e5;\n            display: inline-block;\n            overflow: hidden;\n        }\n        .small.thumb {\n            width: 100px;\n            height: 100px;\n        }\n        .large.thumb {\n            width: 500px;\n            height: 500px;\n        }\n     /style \n\n\n     script src= https://www.google.com/jsapi /script \n     script src= ../bower_components/d3/d3.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/amcharts.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/serial.js /script \n     script src= ../bower_components/colorbrewer/colorbrewer.js /script \n\n     script src= ../dist/hpcc-viz-common.js /script \n     script src= ../dist/hpcc-viz-api.min.js /script \n     script src= ../dist/hpcc-viz-chart.min.js /script \n     script src= ../dist/hpcc-viz-amchart.min.js /script \n\n\n     script \n        var graph = null;\n        google.load( visualization ,  1 , {\n            callback: doTest,\n            packages: [ corechart ]\n        });\n        function doTest() {\n            var timeoutStep = 500;\n            var timeoutIdx = 0;\n            setTimeout(function () {\n                displayCharts();\n            }, timeoutStep * timeoutIdx++);\n            function displayCharts() {\n                new amchart_Bar()\n                        .target( ambar )\n                        .columns([ Letter ,  Frequency ])\n                        .data([\n                            ['A', .08167],\n                            ['B', .01492],\n                            ['C', .02782],\n                            ['D', .04253],\n                            ['E', .12702],\n                            ['F', .02288],\n                            ['G', .02015],\n                            ['H', .06094],\n                            ['I', .06966],\n                            ['J', .00153],\n                            ['K', .00772],\n                            ['L', .04025],\n                            ['M', .02406],\n                            ['N', .06749],\n                            ['O', .07507],\n                            ['P', .01929],\n                            ['Q', .00095],\n                            ['R', .05987],\n                            ['S', .06327],\n                            ['T', .09056],\n                            ['U', .02758],\n                            ['V', .00978],\n                            ['W', .02360],\n                            ['X', .00150],\n                            ['Y', .01974],\n                            ['Z', .00074],\n                        ])\n                        .render()\n                ;\n            }\n        }\n     /script  /head  body  div id= ambar  class= large thumb /div  /body  /html", 
            "title": "AM Bar Chart"
        }, 
        {
            "location": "/Examples/#pie-chart", 
            "text": "AMD Version   !doctype html  html  head \n     meta charset= utf-8 \n     script src= http://rawgit.com/jrburke/requirejs/2.1.17/require.js /script \n     link rel= stylesheet  type= text/css  href= test.css \n     script src= ../dist-amd/hpcc-viz.js /script \n     script src= ../dist-amd/hpcc-bundles.js /script \n     script  require.config({\n        paths: {\n             font-awesome :  ../dist-amd/font-awesome/css/font-awesome.min ,\n             src :  ../dist-amd \n        }\n    });\n     /script cd \n     script \n        require([ ../src/google/Pie ], function (GPie) {\n            new GPie()\n                    .target( gpie )\n                    .columns([ Operating System ,  Market Share ])\n                    .data([\n                        [ Windows 8 , 23.5],\n                        [ Windows 7 , 51.1],\n                        [ Windows Vista , 0.7],\n                        [ Other Windows , 0.5],\n                        [ Windows XP ,3.3],\n                        [ Linux ,5.5],\n                        [ Mac ,10.2],\n                        [ Mobile ,5.4]\n                    ])\n                    .render()\n            ;\n        });\n     /script  /head  body  h1 Popularity of Operating Systems  /h1  div id= gpie  class= xlarge thumb /div  /div  /body  /html   [Non-AMD Version] (http://rawgit.com/Evan1415/hpcc_viz/master/HELLO_WORLD_EXAMPLES/pie_namd.html)   !doctype html  html  head \n     meta charset= utf-8 \n     meta http-equiv= X-UA-Compatible  content= chrome=1 \n     title HPCC Systems - Visualization Framework /title \n     link rel= stylesheet  href= test.css \n     !--\n    Most scripts are optional, include only what you need\n    @TODO: shoud document dependencies in README\n    -- \n     script src= https://www.google.com/jsapi /script \n     script src= https://maps.googleapis.com/maps/api/js /script \n     script src= ../bower_components/d3/d3.js /script \n     script src= ../bower_components/c3/c3.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/amcharts.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/serial.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/funnel.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/gauge.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/pie.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/radar.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/xy.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/gantt.js /script \n     script src= ../bower_components/dagre/index.js /script \n     script src= ../bower_components/colorbrewer/colorbrewer.js /script \n     script src= ../bower_components/topojson/topojson.js /script \n     script src= ../bower_components/d3-cloud/d3.layout.cloud.js /script \n\n     script src= ../dist/hpcc-viz-common.js /script \n     script src= ../dist/hpcc-viz-api.min.js /script \n     script src= ../dist/hpcc-viz-other.min.js /script \n     script src= ../dist/hpcc-viz-tree.min.js /script \n     script src= ../dist/hpcc-viz-chart.min.js /script \n     script src= ../dist/hpcc-viz-graph.min.js /script \n     script src= ../dist/hpcc-viz-c3chart.min.js /script \n     script src= ../dist/hpcc-viz-amchart.min.js /script \n     script src= ../dist/hpcc-viz-google.min.js /script \n     script src= ../dist/hpcc-viz-map.min.js /script \n     script src= ../dist/hpcc-viz-layout.min.js /script \n     script src= ../dist/hpcc-viz-marshaller.min.js /script \n\n     script \n        var graph = null;\n        google.load( visualization ,  1 , {\n            callback: doTest,\n            packages: [ corechart ]\n        });\n\n        function doTest() {\n            new google_Pie()\n                    .target( gpie )\n                    .columns([ Operating System ,  Market Share ])\n                    .data([\n                        [ Windows 8 , 23.5],\n                        [ Windows 7 , 51.1],\n                        [ Windows Vista , 0.7],\n                        [ Other Windows , 0.5],\n                        [ Windows XP , 3.3],\n                        [ Linux , 5.5],\n                        [ Mac , 10.2],\n                        [ Mobile , 5.4]\n                    ])\n                    .render()\n\n        }\n     /script  /head  body onload= doTest  div id= gpie  class= xlarge thumb /div  /body  /html", 
            "title": "Pie Chart"
        }, 
        {
            "location": "/Examples/#marshaller", 
            "text": "AMD Version  In this version of the Marshaller, we present an interactive, dynamic widget that visualises electoral data from the United States.    !DOCTYPE html  html  head \n     script src= http://rawgit.com/jrburke/requirejs/2.1.17/require.js /script \n     script src= ../dist-amd/hpcc-viz.js /script \n     script src= ../dist-amd/hpcc-bundles.js /script \n     script  require.config({\n        paths: {\n             font-awesome :  ../dist-amd/font-awesome/css/font-awesome.min ,\n             src :  ../dist-amd \n        }\n    });\n     /script  /head  body  script \n    require([ src/marshaller/Graph ], function (Graph) {\n        new Graph()\n                .size({width:800,height:500})\n                .target( widget-wrapper )\n                .testData()\n                .render()\n        ;\n    }); /script  div id= widget-wrapper /div  /body  /html   Non-AMD Version  !doctype html  html  head \n     meta charset= utf-8 \n     meta http-equiv= X-UA-Compatible  content= chrome=1 \n     title HPCC Systems - Visualization Framework /title \n     link rel= stylesheet  href= test.css \n\n     script src= https://www.google.com/jsapi /script \n     script src= https://maps.googleapis.com/maps/api/js /script \n     script src= ../bower_components/d3/d3.js /script \n     script src= ../bower_components/c3/c3.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/amcharts.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/serial.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/funnel.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/gauge.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/pie.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/radar.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/xy.js /script \n     script src= ../bower_components/amcharts/dist/amcharts/gantt.js /script \n     script src= ../bower_components/dagre/index.js /script \n     script src= ../bower_components/colorbrewer/colorbrewer.js /script \n     script src= ../bower_components/topojson/topojson.js /script \n     script src= ../bower_components/d3-cloud/d3.layout.cloud.js /script \n\n     script src= ../dist/hpcc-viz-common.js /script \n     script src= ../dist/hpcc-viz-api.min.js /script \n     script src= ../dist/hpcc-viz-other.min.js /script \n     script src= ../dist/hpcc-viz-tree.min.js /script \n     script src= ../dist/hpcc-viz-chart.min.js /script \n     script src= ../dist/hpcc-viz-graph.min.js /script \n     script src= ../dist/hpcc-viz-c3chart.min.js /script \n     script src= ../dist/hpcc-viz-amchart.min.js /script \n     script src= ../dist/hpcc-viz-google.min.js /script \n     script src= ../dist/hpcc-viz-map.min.js /script \n     script src= ../dist/hpcc-viz-layout.min.js /script \n     script src= ../dist/hpcc-viz-marshaller.min.js /script \n\n     script \n        var graph = null;\n        google.load( visualization ,  1 , {\n            callback: doTest,\n            packages: [ corechart ]\n        });\n\n        function doTest() {\n            new marshaller_HTML()\n                    .size({width:800,height:500})\n                    .target( widget-wrapper )\n                    .testData()\n                    .render()\n            ;\n        }\n     /script  /head  body onload= doTest  div id= widget-wrapper /div  /body  /html", 
            "title": "Marshaller"
        }, 
        {
            "location": "/FAQ/", 
            "text": "Reusing the Marshaller\n\n\nOr how do I take control of the Visualization Placement in MY web page\n\n\n\n\nCreate a new instance of the HipieDDL Marshaller:\n\n\n\n\nthis.marshaller = new HipieDDL.Marshaller();\n\n\n\n\n\n\nInitialize it with the URL to your DDL:\n\n\n\n\nthis.marshaller.url(this._url, function (response) {\n    //  My DIV Creation will go here   ---\n}\n````\n* Create your own DIV elements and place the HipieDDL created widgets within them:\n\n\n\n\nfor (var key in context.marshaller.dashboards) {\n    var dashboard = context.marshaller.dashboards[key];\n    for (var key2 in dashboard.visualizations) {\n        var visualization = dashboard.visualizations[key2];\n        if (visualization.widget) {\n            var width = 640, height = 480;\n            var myDiv = document.createElement(\"DIV\");\n            myDiv.setAttribute(\"style\", \"width: \" + width + \"px;height: \" + height + \"px;\");\n            myDiv.setAttribute(\"display\", \"inline-block\");\n            document.getElementById(\"htmlMarshaller\").appendChild(myDiv);\n            visualization.widget\n                .pos({ x: width / 2, y: width / 2 })\n                .size({ width: width, height: height })\n                .target(myDiv)\n                .render()\n            ;\n        }\n    }\n}\n\n\n* Kick start the whole DDL process, by fetching the default data:\n\n\n\n\nfor (var key in dashboard.datasources) {\n    dashboard.datasources[key].fetchData({}, true);\n}\n\n\n\n* Putting it all together:\n\n\n\n\nthis.marshaller = new HipieDDL.Marshaller();\nthis.marshaller.url(this._url, function (response) {\n    for (var key in context.marshaller.dashboards) {\n        var dashboard = context.marshaller.dashboards[key];\n        for (var key2 in dashboard.visualizations) {\n            var visualization = dashboard.visualizations[key2];\n            if (visualization.widget) {\n                var width = 640, height = 480;\n                var myDiv = document.createElement(\"DIV\");\n                myDiv.setAttribute(\"style\", \"width: \" + width + \"px;height: \" + height + \"px;\");\n                myDiv.setAttribute(\"display\", \"inline-block\");\n                document.getElementById(\"htmlMarshaller\").appendChild(myDiv);\n                visualization.widget\n                    .pos({ x: width / 2, y: width / 2 })\n                    .size({ width: width, height: height })\n                    .target(myDiv)\n                    .render()\n                ;\n            }\n        }\n    }\n    for (var key in dashboard.datasources) {\n        dashboard.datasources[key].fetchData({}, true);\n    }\n    return;\n});\n```\n\n\nFAQs\n\n\n1. I'm hosting on RawGit but my webpage isn't updating.\n\n\nIt takes a few minutes, depending on your usage of the service, traffic on the server etc. so it should be up soon! \n\n\n2.", 
            "title": "FAQ"
        }, 
        {
            "location": "/FAQ/#reusing-the-marshaller", 
            "text": "Or how do I take control of the Visualization Placement in MY web page   Create a new instance of the HipieDDL Marshaller:   this.marshaller = new HipieDDL.Marshaller();   Initialize it with the URL to your DDL:   this.marshaller.url(this._url, function (response) {\n    //  My DIV Creation will go here   ---\n}\n````\n* Create your own DIV elements and place the HipieDDL created widgets within them:  for (var key in context.marshaller.dashboards) {\n    var dashboard = context.marshaller.dashboards[key];\n    for (var key2 in dashboard.visualizations) {\n        var visualization = dashboard.visualizations[key2];\n        if (visualization.widget) {\n            var width = 640, height = 480;\n            var myDiv = document.createElement(\"DIV\");\n            myDiv.setAttribute(\"style\", \"width: \" + width + \"px;height: \" + height + \"px;\");\n            myDiv.setAttribute(\"display\", \"inline-block\");\n            document.getElementById(\"htmlMarshaller\").appendChild(myDiv);\n            visualization.widget\n                .pos({ x: width / 2, y: width / 2 })\n                .size({ width: width, height: height })\n                .target(myDiv)\n                .render()\n            ;\n        }\n    }\n}  * Kick start the whole DDL process, by fetching the default data:  for (var key in dashboard.datasources) {\n    dashboard.datasources[key].fetchData({}, true);\n}  \n* Putting it all together:  this.marshaller = new HipieDDL.Marshaller();\nthis.marshaller.url(this._url, function (response) {\n    for (var key in context.marshaller.dashboards) {\n        var dashboard = context.marshaller.dashboards[key];\n        for (var key2 in dashboard.visualizations) {\n            var visualization = dashboard.visualizations[key2];\n            if (visualization.widget) {\n                var width = 640, height = 480;\n                var myDiv = document.createElement(\"DIV\");\n                myDiv.setAttribute(\"style\", \"width: \" + width + \"px;height: \" + height + \"px;\");\n                myDiv.setAttribute(\"display\", \"inline-block\");\n                document.getElementById(\"htmlMarshaller\").appendChild(myDiv);\n                visualization.widget\n                    .pos({ x: width / 2, y: width / 2 })\n                    .size({ width: width, height: height })\n                    .target(myDiv)\n                    .render()\n                ;\n            }\n        }\n    }\n    for (var key in dashboard.datasources) {\n        dashboard.datasources[key].fetchData({}, true);\n    }\n    return;\n});\n```", 
            "title": "Reusing the Marshaller"
        }, 
        {
            "location": "/FAQ/#faqs", 
            "text": "1. I'm hosting on RawGit but my webpage isn't updating.  It takes a few minutes, depending on your usage of the service, traffic on the server etc. so it should be up soon!   2.", 
            "title": "FAQs"
        }, 
        {
            "location": "/Getting-Started/", 
            "text": "Getting Started\n\n\nInstallation details for both  \nusers\n and  \ndevelopers\n are found below. \n\n\nWhat follow are a number of examples that illustrate how to use the HPCC platform, and we begin with the obligatory hello world example!\n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n   \n    \nlink rel=\nstylesheet\n type=\ntext/css\n href=\n../src/common/TextBox.css\n\n    \nlink rel=\nstylesheet\n type=\ntext/css\n href=\n../src/common/Text.css\n\n    \nlink rel=\nstylesheet\n type=\ntext/css\n href=\n../src/common/Shape.css\n\n    \nscript src=\nhttp://rawgit.com/jrburke/requirejs/2.1.17/require.js\n/script\n\n    \nscript src=\n../src/config.js\n/script\n\n    \nscript\n\n        require([\n../src/common/TextBox\n], function (TextBox) {\n            new TextBox()\n                    .target(\nhelloWorld\n)\n                    .text(\nHello\\nWorld!\n)\n                    .render()\n            ;\n        });\n    \n/script\n\n\n/head\n\n\nbody\n\n\ndiv id=\nhelloWorld\n style=\nwidth:100%; height:100vh\n\n\n/div\n\n\n/body\n\n\n/html\n\n\n\n\n\nRequireJS is called with the inclusion of\n\n\nscript src=\"http://rawgit.com/jrburke/requirejs/2.1.17/require.js\"\n/script\n\n\n\n\nand it allows the opening of all our js files without their inclusion in the header.\n\n\n2. A simple [Bar Chart] (http://rawgit.com/Evan1415/hpcc_viz/master/HELLO_WORLD_EXAMPLES/Bar.html)\n\n\nIn this example we will just include a simple bar chart, embedding the source data in the actual html file. Loading files will come up later. \nThe data used illustrates the average frequency of letters that occur in a given sentence. \n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nlink rel=\nstylesheet\n type=\ntext/css\n href=\n../src/amchart/Bar.css\n\n    \nscript src=\nhttp://rawgit.com/jrburke/requirejs/2.1.17/require.js\n/script\n\n    \nscript src=\n../src/config.js\n/script\n\n    \nscript\n\n        require([\n../src/amchart/Bar\n], function (AmBar) {\n            new AmBar()\n                    .target(\nambar\n)\n                    .columns([\nLetter\n, \nFrequency\n])\n                    .data([\n                        ['A', .08167],\n                        ['B', .01492],\n                        ['C', .02782],\n                        ['D', .04253],\n                        ['E', .12702],\n                        ['F', .02288],\n                        ['G', .02015],\n                        ['H', .06094],\n                        ['I', .06966],\n                        ['J', .00153],\n                        ['K', .00772],\n                        ['L', .04025],\n                        ['M', .02406],\n                        ['N', .06749],\n                        ['O', .07507],\n                        ['P', .01929],\n                        ['Q', .00095],\n                        ['R', .05987],\n                        ['S', .06327],\n                        ['T', .09056],\n                        ['U', .02758],\n                        ['V', .00978],\n                        ['W', .02360],\n                        ['X', .00150],\n                        ['Y', .01974],\n                        ['Z', .00074],\n                    ])\n                    .render()\n            ;\n        });\n    \n/script\n\n\n/head\n\n\nbody\n\n\ndiv id=\nambar\n style=\nwidth:100%; height:100vh\n\n\n/div\n\n\n/body\n\n\n/html\n\n\n\n\n\n\n3. A simple [Pie Chart] (http://rawgit.com/Evan1415/hpcc_viz/master/HELLO_WORLD_EXAMPLES/Pie.html)\n\n\nIn this example we display the most popular operating systems in a pie chart. \n\n\n!doctype html\n\n\nhtml\n\n\nhead\n\n    \nmeta charset=\nutf-8\n\n    \nlink rel=\nstylesheet\n type=\ntext/css\n href=\n../src/google/Pie.css\n\n    \nscript src=\nhttp://rawgit.com/jrburke/requirejs/2.1.17/require.js\n/script\n\n    \nscript src=\n../src/config.js\n/script\n\n    \nscript\n\n        require([\n../src/google/Pie\n], function (GPie) {\n            new GPie()\n                    .target(\ngpie\n)\n                    .testData()\n                    .render()\n            ;\n        });\n    \n/script\n\n\n/head\n\n\nbody\n\n\ndiv id=\ngpie\n style=\nwidth:100%; height:100vh\n\n\n/div\n\n\n\n/body\n\n\n/html\n\n\n\n\n\nInstead of inserting data manually the .testData() method calls the data in this case, which is contained in INDChart.js", 
            "title": "Getting Started"
        }, 
        {
            "location": "/Getting-Started/#getting-started", 
            "text": "Installation details for both   users  and   developers  are found below.   What follow are a number of examples that illustrate how to use the HPCC platform, and we begin with the obligatory hello world example!  !doctype html  html  head \n     meta charset= utf-8    \n     link rel= stylesheet  type= text/css  href= ../src/common/TextBox.css \n     link rel= stylesheet  type= text/css  href= ../src/common/Text.css \n     link rel= stylesheet  type= text/css  href= ../src/common/Shape.css \n     script src= http://rawgit.com/jrburke/requirejs/2.1.17/require.js /script \n     script src= ../src/config.js /script \n     script \n        require([ ../src/common/TextBox ], function (TextBox) {\n            new TextBox()\n                    .target( helloWorld )\n                    .text( Hello\\nWorld! )\n                    .render()\n            ;\n        });\n     /script  /head  body  div id= helloWorld  style= width:100%; height:100vh  /div  /body  /html   RequireJS is called with the inclusion of  script src=\"http://rawgit.com/jrburke/requirejs/2.1.17/require.js\" /script   and it allows the opening of all our js files without their inclusion in the header.  2. A simple [Bar Chart] (http://rawgit.com/Evan1415/hpcc_viz/master/HELLO_WORLD_EXAMPLES/Bar.html)  In this example we will just include a simple bar chart, embedding the source data in the actual html file. Loading files will come up later. \nThe data used illustrates the average frequency of letters that occur in a given sentence.   !doctype html  html  head \n     meta charset= utf-8 \n     link rel= stylesheet  type= text/css  href= ../src/amchart/Bar.css \n     script src= http://rawgit.com/jrburke/requirejs/2.1.17/require.js /script \n     script src= ../src/config.js /script \n     script \n        require([ ../src/amchart/Bar ], function (AmBar) {\n            new AmBar()\n                    .target( ambar )\n                    .columns([ Letter ,  Frequency ])\n                    .data([\n                        ['A', .08167],\n                        ['B', .01492],\n                        ['C', .02782],\n                        ['D', .04253],\n                        ['E', .12702],\n                        ['F', .02288],\n                        ['G', .02015],\n                        ['H', .06094],\n                        ['I', .06966],\n                        ['J', .00153],\n                        ['K', .00772],\n                        ['L', .04025],\n                        ['M', .02406],\n                        ['N', .06749],\n                        ['O', .07507],\n                        ['P', .01929],\n                        ['Q', .00095],\n                        ['R', .05987],\n                        ['S', .06327],\n                        ['T', .09056],\n                        ['U', .02758],\n                        ['V', .00978],\n                        ['W', .02360],\n                        ['X', .00150],\n                        ['Y', .01974],\n                        ['Z', .00074],\n                    ])\n                    .render()\n            ;\n        });\n     /script  /head  body  div id= ambar  style= width:100%; height:100vh  /div  /body  /html   3. A simple [Pie Chart] (http://rawgit.com/Evan1415/hpcc_viz/master/HELLO_WORLD_EXAMPLES/Pie.html)  In this example we display the most popular operating systems in a pie chart.   !doctype html  html  head \n     meta charset= utf-8 \n     link rel= stylesheet  type= text/css  href= ../src/google/Pie.css \n     script src= http://rawgit.com/jrburke/requirejs/2.1.17/require.js /script \n     script src= ../src/config.js /script \n     script \n        require([ ../src/google/Pie ], function (GPie) {\n            new GPie()\n                    .target( gpie )\n                    .testData()\n                    .render()\n            ;\n        });\n     /script  /head  body  div id= gpie  style= width:100%; height:100vh  /div  /body  /html   Instead of inserting data manually the .testData() method calls the data in this case, which is contained in INDChart.js", 
            "title": "Getting Started"
        }, 
        {
            "location": "/GitHub-Releases/", 
            "text": "This page will detail how a user can download the Visualisation framework from \nhere\n and, from there, how to use the framework in this context. \n\n\nLocally\n\n\nTo use the framework locally, firstly unzip the compressed file that you have downloaded. Before jumping straight into building your own set of widgets and visualisation, we will take a tour of how it is already implemented in the downloaded framework. So, to begin, change into the demos directory \n\n\ncd demos\n\n\n\nOpen the file \ntest.html\n which should launch in your preferred web browser. What should be observed is a set of widgets, so you can look through these ones to see what you like. In fact, there is another file \ndermatology.html\n that holds a comprehensive list of all developed widgets that have been developed and that can viewed at your own leisure. \n\n\nNow, let's use the framework to build our own first widget. In the folder \ndemos\n make a file \n\n\ntouch new_widget.html\n\n\n\nand open in your favourite text editor. Say we want to make the hello world widget, then we should paste the code from \nhere\n into \nnew_widget.html\n and just open it in the web browser in the exact same we did with \ntest.html\n. \n\n\nNow, understanding how to build the hello world example, we can now move onto more complicated and complicated examples, but in essence, that is the way in which we use the visualisation framework within this context. \n\n\nUsing on Git", 
            "title": "GitHub Releases"
        }, 
        {
            "location": "/GitHub-Releases/#locally", 
            "text": "To use the framework locally, firstly unzip the compressed file that you have downloaded. Before jumping straight into building your own set of widgets and visualisation, we will take a tour of how it is already implemented in the downloaded framework. So, to begin, change into the demos directory   cd demos  Open the file  test.html  which should launch in your preferred web browser. What should be observed is a set of widgets, so you can look through these ones to see what you like. In fact, there is another file  dermatology.html  that holds a comprehensive list of all developed widgets that have been developed and that can viewed at your own leisure.   Now, let's use the framework to build our own first widget. In the folder  demos  make a file   touch new_widget.html  and open in your favourite text editor. Say we want to make the hello world widget, then we should paste the code from  here  into  new_widget.html  and just open it in the web browser in the exact same we did with  test.html .   Now, understanding how to build the hello world example, we can now move onto more complicated and complicated examples, but in essence, that is the way in which we use the visualisation framework within this context.", 
            "title": "Locally"
        }, 
        {
            "location": "/GitHub-Releases/#using-on-git", 
            "text": "", 
            "title": "Using on Git"
        }, 
        {
            "location": "/GitHub-Sources/", 
            "text": "TODO", 
            "title": "GitHub Sources"
        }, 
        {
            "location": "/Marshaller/", 
            "text": "TODO", 
            "title": "Marshaller"
        }, 
        {
            "location": "/Methods-of-hosting-your-own-site-with-visualisations/", 
            "text": "RawGit\n\n\nPaste \n\n\nhttps://github.com/hpcc-systems/Visualization/blob/master/my_widget/my_first_widget.html\n\n\n\ninto the prompt and now enjoy your widget hosted online! \n\n\nRawGit should be used for the early dev/testing stage, GitHub Pages is a much more efficient method of hosting. \n\n\nGitHub Pages and Jekyll\n\n\nThe process of setting up a website hosted on GitHub is explained here\n\n\nhttps://help.github.com/articles/creating-pages-with-the-automatic-generator/\n\n\n\nand when the user is comfortable with establishing a new Project Page or Organisation Page we will then move onto \nusing GutHub Pages with Jekyll. \n\n\nAssuming the user is comfortable with how GitHub Pages works, let's now incorporate them with Jekyll.\n\n\nJekyll powers GitHub Pages and it is a \nblog aware, static site generator in Ruby\n.\n\n\nThe following two links should be all that is needed to get up to speed with what Jekyll \nis\n and what Jekyll \ndoes\n.\n\n\nJekyll\n\n\nJekyll bootstrap\n\n\nTo install Jekyll, run the following command in the directory that will contain your website\n\n\ngem install jekyll\n\n\nnow, we have Jekyll installed in our web directory. We use the following command to create a new Jekyll directory\nthat will contain the boilerplate Jekyll code that will contain the webpage files \n\n\njekyll new website_directory\n\n\nand change into this directory\n\n\ncd website_directory\n\n\nand inspecting it's contents it should have the following structure\n\n\n_config.yml _site\n_includes   about.md\n_layouts    css\n_posts      feed.xml\n_sass       index.html\n\n\nand \nhttp://jekyllbootstrap.com/lessons/jekyll-introduction.html#toc_6\n gives a good explanation of the purpose of each of these files. \n\n\nTo host the webpage locally, run the following \n\n\njekyll serve\n\n\nand open a web browser and search \n\n\nhttp://localhost:4000\n \n\n\nThe beauty of this is we can push this to the repo from where the website will be hosted and all content can be managed by Jekyll locally and always saved by GitHub - also there will be no hosting problems in relation to updating the site, in contrast to the case of RawGit.", 
            "title": "Methods of hosting your own site with visualisations"
        }, 
        {
            "location": "/Methods-of-hosting-your-own-site-with-visualisations/#rawgit", 
            "text": "Paste   https://github.com/hpcc-systems/Visualization/blob/master/my_widget/my_first_widget.html  into the prompt and now enjoy your widget hosted online!   RawGit should be used for the early dev/testing stage, GitHub Pages is a much more efficient method of hosting.", 
            "title": "RawGit"
        }, 
        {
            "location": "/Methods-of-hosting-your-own-site-with-visualisations/#github-pages-and-jekyll", 
            "text": "The process of setting up a website hosted on GitHub is explained here  https://help.github.com/articles/creating-pages-with-the-automatic-generator/  and when the user is comfortable with establishing a new Project Page or Organisation Page we will then move onto \nusing GutHub Pages with Jekyll.   Assuming the user is comfortable with how GitHub Pages works, let's now incorporate them with Jekyll.  Jekyll powers GitHub Pages and it is a  blog aware, static site generator in Ruby .  The following two links should be all that is needed to get up to speed with what Jekyll  is  and what Jekyll  does .  Jekyll  Jekyll bootstrap  To install Jekyll, run the following command in the directory that will contain your website  gem install jekyll  now, we have Jekyll installed in our web directory. We use the following command to create a new Jekyll directory\nthat will contain the boilerplate Jekyll code that will contain the webpage files   jekyll new website_directory  and change into this directory  cd website_directory  and inspecting it's contents it should have the following structure  _config.yml _site\n_includes   about.md\n_layouts    css\n_posts      feed.xml\n_sass       index.html  and  http://jekyllbootstrap.com/lessons/jekyll-introduction.html#toc_6  gives a good explanation of the purpose of each of these files.   To host the webpage locally, run the following   jekyll serve  and open a web browser and search   http://localhost:4000    The beauty of this is we can push this to the repo from where the website will be hosted and all content can be managed by Jekyll locally and always saved by GitHub - also there will be no hosting problems in relation to updating the site, in contrast to the case of RawGit.", 
            "title": "GitHub Pages and Jekyll"
        }, 
        {
            "location": "/The-Playground/", 
            "text": "The \nPlayground\n is an online, dynamic and user-friendly tool that allows users to alter widgets, primarily with a view to being able to manipulate the data-input into those widgets in an easy manner without having to edit the source code. \n\n\nStructure of the Widget Page\n\n\nThe page is divided into two views, on the left being the widget currently being examined and on the right an editing interface where publish parameters can be manipulated with other features that will now be explained. \n\n\nWidget View\n\n\nThis is located to the left hand side of the page and it is where the widget is primarily displayed with the following options. \n\n\nSelect a Chart\n\n\nOpens a drop-down menu from where the user can choose what widget to interact with.\n\n\nShow Documentation\n\n\nThis will redirect the user to a completely new page with a comprehensive set of documentation on each widget and their members and methods so that the user can easily add or change functionality to the widget that they would like.\n\n\nSelected Widget\n\n\nA view of the chosen widget.\n\n\nSerialization Test\n\n\nBy selecting this tab, the user refreshes the widget if they have made any changes to it in the editing section. \n\n\nSeriaizsation JSON\n\n\nDisplays a JSON file with a list of publish parameters that control how the widget should look. This JSON file is dynamic and is changed every time an edit to one of the publish parameters is made. Effectively, when we switch to the \nSerialization Tab\n tab, it is this JSON file that is refreshed and the view of the new widget can be then seen.\n\n\nEditing View\n\n\nThis is located to the right hand side of the page and comprises of the following tabs that are related to editing the widget that is currently in the view.\n\n\nDiscover Params\n\n\nA long list of publish parameters that are specific to each widget that can be manipulated and upon manipulation will change the Serialization JSON so that the changes can be viewed when the Serialization tab is refreshed. Of particular interest here may be to change the input data into a specific widget, which can be proved to be quite useful and easier than editing the source code. \n\n\nExample Code\n\n\nHere the user is presented with the HTML source code that generates the widget so that they can copy and paste it into their own project if they would like or view it in browser by selecting the \"Demo Example Code (Plain)\" option at the bottom of the page. \n\n\nObject Hierarchy\n\n\nThis tab presents the user with a visualisation that details the dependencies of the currently displayed widget in a linking format. \n\n\nLive Edit CSS\n\n\nThis is a Live Edit CSS interactive view.", 
            "title": "Playground"
        }, 
        {
            "location": "/The-Playground/#structure-of-the-widget-page", 
            "text": "The page is divided into two views, on the left being the widget currently being examined and on the right an editing interface where publish parameters can be manipulated with other features that will now be explained.", 
            "title": "Structure of the Widget Page"
        }, 
        {
            "location": "/The-Playground/#widget-view", 
            "text": "This is located to the left hand side of the page and it is where the widget is primarily displayed with the following options.   Select a Chart  Opens a drop-down menu from where the user can choose what widget to interact with.  Show Documentation  This will redirect the user to a completely new page with a comprehensive set of documentation on each widget and their members and methods so that the user can easily add or change functionality to the widget that they would like.  Selected Widget  A view of the chosen widget.  Serialization Test  By selecting this tab, the user refreshes the widget if they have made any changes to it in the editing section.   Seriaizsation JSON  Displays a JSON file with a list of publish parameters that control how the widget should look. This JSON file is dynamic and is changed every time an edit to one of the publish parameters is made. Effectively, when we switch to the  Serialization Tab  tab, it is this JSON file that is refreshed and the view of the new widget can be then seen.", 
            "title": "Widget View"
        }, 
        {
            "location": "/The-Playground/#editing-view", 
            "text": "This is located to the right hand side of the page and comprises of the following tabs that are related to editing the widget that is currently in the view.  Discover Params  A long list of publish parameters that are specific to each widget that can be manipulated and upon manipulation will change the Serialization JSON so that the changes can be viewed when the Serialization tab is refreshed. Of particular interest here may be to change the input data into a specific widget, which can be proved to be quite useful and easier than editing the source code.   Example Code  Here the user is presented with the HTML source code that generates the widget so that they can copy and paste it into their own project if they would like or view it in browser by selecting the \"Demo Example Code (Plain)\" option at the bottom of the page.   Object Hierarchy  This tab presents the user with a visualisation that details the dependencies of the currently displayed widget in a linking format.   Live Edit CSS  This is a Live Edit CSS interactive view.", 
            "title": "Editing View"
        }, 
        {
            "location": "/Theme-Editor/", 
            "text": "The \nTheme Editor\n is an online, dynamical toolkit that enables users to visually alter widgets by changing their publish parameters in the browser, and to integrate the selected widgets into dynamic dashboards that can be used in projects and also downloaded into static image files. \n\n\nStructure of the Theme Editor\n\n\nThe editor is broken into two sections. The main section (to the left of the page) is where the widgets are visualised and in the right-side table menu are some editor options, which relate to being in ThemeMode or not and the publish parameters. Contained in the main section is also a menu-bar that enables us to manipulate the widgets in different ways. The menu-bar consists of the following options \nWidgets\n, \nColors\n, \nFonts\n and \nLayouts\n, and each option will be explained. \n\n\nMain Section\n\n\nWidgets\n\n\nBy selecting the widgets option initialises the new sub-menu-bar that reads \nTheme Editor\n, \nView Themes\n, \nView Serials\n which have the following purposes\n\n\nTheme Editor\n\n\nThis opens a box from where we can decide what widgets we want to include in the dashboard. By selecting a widget it simply will add that widget to the dashboard. \n\n\nView Themes\n\n\nThis opens a new window with a selection of saved themes in JSON format. \n\n\nView Serials\n\n\nThis opens a new window with serialised themes in JSON format.\n\n\nColors\n\n\nBy selecting the Colors option initialises the new sub-menu-bar that reads \nContainer Colors\n, \nOrdinal Palette\n, \nRainbow Palette\n which have the following purposes\n\n\nContainer Colors\n\n\nIn choosing this option, the user can customise the colors of the container within which the widget is contained, whether by using built-in themes or building them from scratch.\n\n\nOrdinal Palette\n\n\nThis will change the colors of, say, the columns in a bar chart but in this case we can choose discrete, unrelated colours from the palette. There are number of options that if chosen will change the components of each individual widget.\n\n\nRainbow Palette\n\n\nThis has the same function as the Ordinal Palette but instead of unrelated colours the palette follows a continuous color change, making visualisations sometimes easier to interpret.\n\n\nFonts\n\n\nBy selecting the Fonts option initialises the new sub-menu-bar that reads \nTitle Font Family\n, \nTitle Font Size\n, \nFont Family\n and [Font Size]((https://github.com/hpcc-systems/Visualization/wiki/Theme-Editor#font-size) which have the following purposes\n\n\nTitle Font Family\n\n\nChanges the font of the title of each widget - available are most standardly used fonts.\n\n\nTitle Font Size\n\n\nChanges the font size of the title of each widget.\n\n\nFont Family\n\n\nChanges the font type of text within each widget.\n\n\nFont Size\n\n\nChanges the font size of the text within each widget.\n\n\nLayout\n\n\nBy selecting the Layout option initialises the new sub-menu-bar that reads \nCell Density\n. Also, inside the layout page, there is a \"drag\" and \"drop\" option where the position of the chosen widgets in the dashboard can be interchanged, extended and moved into entirely new positions. Just drag and drop! \n\n\nCell Density\n\n\nThe cell density is simply a tool to control the number of widgets that are allowed in the dashboard. By increasing the density, it increases the density of each widget, and so decreases the number of allowed widgets within the dashboard. By decreasing the density, more widgets are allowed in the dashboard, though readability issues may occur if the density is too small.\n\n\nRight-Side Table Menu\n\n\nHere I will explain the structure of the right-side table menu. The first drop-down menu here is \"Editor Options\" and depending on whether ThemeMode is selected or not the rest of right-side table menu is different. Effectively, the Theme Editor has two main modes\n\n\n\n\nThemeMode\n\n\nNon-ThemeMode\n\n\n\n\nand depending on the selection of either, the structure of the page is different, and such what follows is a discussion of the structure of the right-side table menu in both different modes. \n\n\nThemeMode\n\n\nBy selecting this option the editor enters a mode where all the widgets are interacted with at once and properties such as container styles and font styles across the dashboard can be changed all at once. The following drop-down menus appear when this option is chosen \nSave/Load Theme\n, \nGrid Options\n, \nChart Colors\n, \nContainer Styles/Colors\n and \nFont Styles/Colors\n\n\nSave/Load Theme\n\n\nHere the user can either load a previously saved theme or save their own one which they have just constructed.\n\n\nGrid Options\n\n\nHere the user can change certain style aspects with respect to grids such as the colors of the XAxis and YAxis Gridline colors.\n\n\nChart Colors\n\n\nHere the chart palettes can be changed in much the same way as \nColors\n.\n\n\nContainer Styles/Colors\n\n\nThe user can change style aspects in relation to the Container in this section.\n\n\nFont Styles/Colors\n\n\nThe user can change the font in a similar way to \nFonts\n but with a number of added options.\n\n\nNon-ThemeMode\n\n\nBy unselecting ThemeMode the user enters into Non-ThemeMode. Non-ThemeMode is characterised by the following drop- down menus \nSave/Load Serial\n and \nChart Properties\n. Conceptually, the main difference in this mode is that the user can make changes that can individually effect each of the widgets and so properties like the column width in a specific bar chart can be changed. \n\n\nSave/Load Serial\n\n\nThis operates much in the same way as \nSave/Load Theme\n but what can be saved in this case are not themes but the serial code that is related to the specific changes that the user will make in this editing mode. Users can also load up previously saved serials.\n\n\nChart Properties\n\n\nIn this drop-down menu the user can change very specific attributes to each widget as mentioned above. There are some technical aspects to being in ThemeMode and Non-ThemeMode from a developers point of view but for now, this is as far as the documentation takes us.", 
            "title": "Theme-Editor"
        }, 
        {
            "location": "/Theme-Editor/#structure-of-the-theme-editor", 
            "text": "The editor is broken into two sections. The main section (to the left of the page) is where the widgets are visualised and in the right-side table menu are some editor options, which relate to being in ThemeMode or not and the publish parameters. Contained in the main section is also a menu-bar that enables us to manipulate the widgets in different ways. The menu-bar consists of the following options  Widgets ,  Colors ,  Fonts  and  Layouts , and each option will be explained.   Main Section  Widgets  By selecting the widgets option initialises the new sub-menu-bar that reads  Theme Editor ,  View Themes ,  View Serials  which have the following purposes  Theme Editor  This opens a box from where we can decide what widgets we want to include in the dashboard. By selecting a widget it simply will add that widget to the dashboard.   View Themes  This opens a new window with a selection of saved themes in JSON format.   View Serials  This opens a new window with serialised themes in JSON format.  Colors  By selecting the Colors option initialises the new sub-menu-bar that reads  Container Colors ,  Ordinal Palette ,  Rainbow Palette  which have the following purposes  Container Colors  In choosing this option, the user can customise the colors of the container within which the widget is contained, whether by using built-in themes or building them from scratch.  Ordinal Palette  This will change the colors of, say, the columns in a bar chart but in this case we can choose discrete, unrelated colours from the palette. There are number of options that if chosen will change the components of each individual widget.  Rainbow Palette  This has the same function as the Ordinal Palette but instead of unrelated colours the palette follows a continuous color change, making visualisations sometimes easier to interpret.  Fonts  By selecting the Fonts option initialises the new sub-menu-bar that reads  Title Font Family ,  Title Font Size ,  Font Family  and [Font Size]((https://github.com/hpcc-systems/Visualization/wiki/Theme-Editor#font-size) which have the following purposes  Title Font Family  Changes the font of the title of each widget - available are most standardly used fonts.  Title Font Size  Changes the font size of the title of each widget.  Font Family  Changes the font type of text within each widget.  Font Size  Changes the font size of the text within each widget.  Layout  By selecting the Layout option initialises the new sub-menu-bar that reads  Cell Density . Also, inside the layout page, there is a \"drag\" and \"drop\" option where the position of the chosen widgets in the dashboard can be interchanged, extended and moved into entirely new positions. Just drag and drop!   Cell Density  The cell density is simply a tool to control the number of widgets that are allowed in the dashboard. By increasing the density, it increases the density of each widget, and so decreases the number of allowed widgets within the dashboard. By decreasing the density, more widgets are allowed in the dashboard, though readability issues may occur if the density is too small.  Right-Side Table Menu  Here I will explain the structure of the right-side table menu. The first drop-down menu here is \"Editor Options\" and depending on whether ThemeMode is selected or not the rest of right-side table menu is different. Effectively, the Theme Editor has two main modes   ThemeMode  Non-ThemeMode   and depending on the selection of either, the structure of the page is different, and such what follows is a discussion of the structure of the right-side table menu in both different modes.", 
            "title": "Structure of the Theme Editor"
        }, 
        {
            "location": "/Theme-Editor/#thememode", 
            "text": "By selecting this option the editor enters a mode where all the widgets are interacted with at once and properties such as container styles and font styles across the dashboard can be changed all at once. The following drop-down menus appear when this option is chosen  Save/Load Theme ,  Grid Options ,  Chart Colors ,  Container Styles/Colors  and  Font Styles/Colors  Save/Load Theme  Here the user can either load a previously saved theme or save their own one which they have just constructed.  Grid Options  Here the user can change certain style aspects with respect to grids such as the colors of the XAxis and YAxis Gridline colors.  Chart Colors  Here the chart palettes can be changed in much the same way as  Colors .  Container Styles/Colors  The user can change style aspects in relation to the Container in this section.  Font Styles/Colors  The user can change the font in a similar way to  Fonts  but with a number of added options.", 
            "title": "ThemeMode"
        }, 
        {
            "location": "/Theme-Editor/#non-thememode", 
            "text": "By unselecting ThemeMode the user enters into Non-ThemeMode. Non-ThemeMode is characterised by the following drop- down menus  Save/Load Serial  and  Chart Properties . Conceptually, the main difference in this mode is that the user can make changes that can individually effect each of the widgets and so properties like the column width in a specific bar chart can be changed.   Save/Load Serial  This operates much in the same way as  Save/Load Theme  but what can be saved in this case are not themes but the serial code that is related to the specific changes that the user will make in this editing mode. Users can also load up previously saved serials.  Chart Properties  In this drop-down menu the user can change very specific attributes to each widget as mentioned above. There are some technical aspects to being in ThemeMode and Non-ThemeMode from a developers point of view but for now, this is as far as the documentation takes us.", 
            "title": "Non-ThemeMode"
        }, 
        {
            "location": "/Widget-Serialization/", 
            "text": "TODO", 
            "title": "Widget Serialization"
        }
    ]
}